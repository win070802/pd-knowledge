const { initializeDatabase, db } = require('./database');

async function initializeData() {
  try {
    console.log('üîÑ Initializing database...');
    await initializeDatabase();

    console.log('üè¢ Creating companies...');
    
    // Create PDH company
    const pdh = await db.createCompany({
      code: 'PDH',
      fullName: 'Ph√°t ƒê·∫°t Holdings',
      parentGroup: 'Ph√°t ƒê·∫°t Group',
      chairman: 'Nguy·ªÖn VƒÉn ƒê·∫°t',
      ceo: 'D∆∞∆°ng H·ªìng C·∫©m',
      description: 'PDH l√† Ph√°t ƒê·∫°t Holdings, c√¥ng ty thu·ªôc Ph√°t ƒê·∫°t Group v·ªõi Ch·ªß t·ªãch H·ªôi ƒë·ªìng Qu·∫£n tr·ªã l√† Nguy·ªÖn VƒÉn ƒê·∫°t v√† T·ªïng Gi√°m ƒë·ªëc l√† D∆∞∆°ng H·ªìng C·∫©m.',
      keywords: ['pdh', 'ph√°t ƒë·∫°t holdings', 'ph√°t ƒë·∫°t group']
    });
    console.log('‚úÖ Created PDH company');

    // Create PDI company  
    const pdi = await db.createCompany({
      code: 'PDI',
      fullName: 'Ph√°t ƒê·∫°t Industrials',
      parentGroup: 'Ph√°t ƒê·∫°t Group',
      chairman: 'Nguy·ªÖn VƒÉn ƒê·∫°t',
      ceo: null,
      description: 'PDI l√† Ph√°t ƒê·∫°t Industrials, c√¥ng ty con thu·ªôc Ph√°t ƒê·∫°t Group chuy√™n v·ªÅ lƒ©nh v·ª±c c√¥ng nghi·ªáp.',
      keywords: ['pdi', 'ph√°t ƒë·∫°t industrials', 'ph√°t ƒë·∫°t group', 'c√¥ng nghi·ªáp']
    });
    console.log('‚úÖ Created PDI company');

    console.log('üõ°Ô∏è Creating sensitive rules...');
    
    // Create sensitive rules
    const rules = [
      {
        ruleName: 'Sexual Content',
        pattern: 'sex|t√¨nh d·ª•c|l√†m t√¨nh|quan h·ªá|khi√™u d√¢m|porn|xxx|nude|n√≥ng b·ªèng|g·ª£i c·∫£m',
        description: 'Ch·∫∑n n·ªôi dung li√™n quan ƒë·∫øn t√¨nh d·ª•c'
      },
      {
        ruleName: 'Violence/Weapons',
        pattern: 's√∫ng|ƒë·∫°n|v≈© kh√≠|gi·∫øt|ch·∫øt|b·∫°o l·ª±c|ƒë√°nh nhau|weapon|gun|kill|violence|bomb|n·ªï|ma t√∫y|drug',
        description: 'Ch·∫∑n n·ªôi dung li√™n quan ƒë·∫øn b·∫°o l·ª±c v√† v≈© kh√≠'
      },
      {
        ruleName: 'Hate Speech',
        pattern: 'ch·ª≠i|m·∫Øng|gh√©t|khinh|ph√¢n bi·ªát|racist|hate',
        description: 'Ch·∫∑n ng√¥n t·ª´ cƒÉm gh√©t'
      },
      {
        ruleName: 'Illegal Activities',
        pattern: 'hack|l·ª´a ƒë·∫£o|scam|cheat|gian l·∫≠n|b·∫•t h·ª£p ph√°p|illegal',
        description: 'Ch·∫∑n ho·∫°t ƒë·ªông b·∫•t h·ª£p ph√°p'
      },
      {
        ruleName: 'Gambling',
        pattern: 'c·ªù b·∫°c|gambling|bet|c∆∞·ª£c|casino',
        description: 'Ch·∫∑n n·ªôi dung li√™n quan ƒë·∫øn c·ªù b·∫°c'
      }
    ];

    for (const rule of rules) {
      await db.createSensitiveRule(rule);
      console.log(`‚úÖ Created rule: ${rule.ruleName}`);
    }

    console.log('üìö Creating knowledge base entries...');
    
    // Create knowledge base entries for PDH
    const pdhKnowledge = [
      {
        companyId: pdh.id,
        question: 'PDH l√† c√¥ng ty g√¨?',
        answer: 'PDH l√† Ph√°t ƒê·∫°t Holdings, c√¥ng ty thu·ªôc Ph√°t ƒê·∫°t Group v·ªõi Ch·ªß t·ªãch H·ªôi ƒë·ªìng Qu·∫£n tr·ªã l√† Nguy·ªÖn VƒÉn ƒê·∫°t v√† T·ªïng Gi√°m ƒë·ªëc l√† D∆∞∆°ng H·ªìng C·∫©m.',
        keywords: ['pdh', 'ph√°t ƒë·∫°t holdings', 'c√¥ng ty'],
        category: 'Th√¥ng tin c√¥ng ty'
      },
      {
        companyId: pdh.id,
        question: 'Ch·ªß t·ªãch PDH l√† ai?',
        answer: 'Ch·ªß t·ªãch H·ªôi ƒë·ªìng Qu·∫£n tr·ªã c·ªßa Ph√°t ƒê·∫°t Holdings (PDH) l√† Nguy·ªÖn VƒÉn ƒê·∫°t.',
        keywords: ['ch·ªß t·ªãch', 'nguy·ªÖn vƒÉn ƒë·∫°t'],
        category: 'Nh√¢n s·ª±'
      },
      {
        companyId: pdh.id,
        question: 'T·ªïng gi√°m ƒë·ªëc PDH l√† ai?',
        answer: 'T·ªïng Gi√°m ƒë·ªëc c·ªßa Ph√°t ƒê·∫°t Holdings (PDH) l√† D∆∞∆°ng H·ªìng C·∫©m.',
        keywords: ['t·ªïng gi√°m ƒë·ªëc', 'd∆∞∆°ng h·ªìng c·∫©m'],
        category: 'Nh√¢n s·ª±'
      }
    ];

    for (const knowledge of pdhKnowledge) {
      await db.createKnowledge(knowledge);
      console.log(`‚úÖ Created knowledge: ${knowledge.question}`);
    }

    // Create knowledge base entries for PDI  
    const pdiKnowledge = [
      {
        companyId: pdi.id,
        question: 'PDI l√† c√¥ng ty g√¨?',
        answer: 'PDI l√† Ph√°t ƒê·∫°t Industrials, c√¥ng ty con thu·ªôc Ph√°t ƒê·∫°t Group chuy√™n v·ªÅ lƒ©nh v·ª±c c√¥ng nghi·ªáp.',
        keywords: ['pdi', 'ph√°t ƒë·∫°t industrials', 'c√¥ng nghi·ªáp'],
        category: 'Th√¥ng tin c√¥ng ty'
      },
      {
        companyId: pdi.id,
        question: 'PDI thu·ªôc nh√≥m n√†o?',
        answer: 'PDI (Ph√°t ƒê·∫°t Industrials) l√† c√¥ng ty con thu·ªôc Ph√°t ƒê·∫°t Group.',
        keywords: ['pdi', 'ph√°t ƒë·∫°t group', 'c√¥ng ty con'],
        category: 'Th√¥ng tin c√¥ng ty'
      }
    ];

    for (const knowledge of pdiKnowledge) {
      await db.createKnowledge(knowledge);
      console.log(`‚úÖ Created knowledge: ${knowledge.question}`);
    }

    console.log('üéâ Data initialization completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`- Companies: ${await (await db.getCompanies()).length}`);
    console.log(`- Sensitive Rules: ${await (await db.getSensitiveRules()).length}`);
    console.log(`- Knowledge Entries: ${await (await db.searchKnowledge('')).length}`);

  } catch (error) {
    console.error('‚ùå Error initializing data:', error);
  }
}

// Run if called directly
if (require.main === module) {
  initializeData().then(() => {
    console.log('‚úÖ Initialization complete!');
    process.exit(0);
  }).catch(error => {
    console.error('‚ùå Initialization failed:', error);
    process.exit(1);
  });
}

module.exports = { initializeData }; 