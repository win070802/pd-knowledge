const { pool } = require('../../config/database');
const { v4: uuidv4 } = require('uuid');

class ConversationService {
  constructor() {
    this.sessionTimeout = 60 * 60 * 1000; // 60 minutes (increased from 30)
  }

  // Create or get existing conversation session
  async getOrCreateSession(sessionId = null, userId = null) {
    try {
      if (!sessionId) {
        sessionId = uuidv4();
      }

      // Check if session exists and is active
      const existingSession = await pool.query(
        'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );

      if (existingSession.rows.length > 0) {
        const session = existingSession.rows[0];
        
        // Get current time from database to ensure UTC consistency
        const timeQuery = await pool.query('SELECT EXTRACT(EPOCH FROM NOW()) * 1000 as current_time_ms');
        const nowUTC = parseInt(timeQuery.rows[0].current_time_ms);
        
        // Get last activity time in milliseconds
        const lastActivity = new Date(session.last_activity);
        const lastActivityUTC = lastActivity.getTime();
        const timeDiff = nowUTC - lastActivityUTC;
        
        console.log(`‚è∞ Session ${sessionId}:`);
        console.log(`   Last activity: ${lastActivity.toISOString()} (${lastActivityUTC})`);
        console.log(`   Current time (DB): ${new Date(nowUTC).toISOString()} (${nowUTC})`);
        console.log(`   Time diff: ${timeDiff}ms (timeout: ${this.sessionTimeout}ms)`);
        
        if (timeDiff > this.sessionTimeout) {
          console.log(`‚è∞ Session expired, creating new one`);
          // Expire old session and create new one
          await this.expireSession(sessionId);
          return await this.createNewSession(sessionId, userId);
        }

        // Update last activity using database NOW() function  
        await pool.query(
          'UPDATE conversations SET last_activity = NOW() WHERE session_id = $1',
          [sessionId]
        );
        
        // Re-fetch updated session
        const updatedSession = await pool.query(
          'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
          [sessionId]
        );
        
        console.log(`üîÑ Updated session activity: ${sessionId}`);
        return updatedSession.rows[0];
      }

      return await this.createNewSession(sessionId, userId);
    } catch (error) {
      console.error('Error getting/creating session:', error);
      throw error;
    }
  }

  // Create new conversation session
  async createNewSession(sessionId, userId = null, retryCount = 0) {
    try {
      // If sessionId conflicts, generate a new one (max 3 retries)
      if (retryCount > 0 || !sessionId) {
        sessionId = uuidv4();
      }

      // Use current UTC timestamp
      const currentTimestamp = new Date();
      
      const result = await pool.query(
        `INSERT INTO conversations (session_id, user_id, context, started_at, last_activity) 
         VALUES ($1, $2, $3, NOW(), NOW()) RETURNING *`,
        [sessionId, userId, JSON.stringify({})]
      );

              console.log(`‚úÖ Created new conversation session: ${sessionId}`);
      return result.rows[0];
    } catch (error) {
      // Handle unique constraint violation by retrying with new UUID
      if (error.code === '23505' && retryCount < 3) {
        console.log(`üîÑ Session ID conflict, retrying with new UUID (attempt ${retryCount + 1})`);
        return await this.createNewSession(null, userId, retryCount + 1);
      }
      
      console.error('Error creating new session:', error);
      throw error;
    }
  }

  // Save message to conversation
  async saveMessage(sessionId, messageType, content, relevantDocuments = [], metadata = {}) {
    try {
      // Get session without creating new one to avoid conflicts
      const sessionQuery = await pool.query(
        'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );

      if (sessionQuery.rows.length === 0) {
        console.error(`‚ùå Session ${sessionId} not found for saving message`);
        return null;
      }

      const session = sessionQuery.rows[0];
      
      const result = await pool.query(
        `INSERT INTO conversation_messages 
         (conversation_id, message_type, content, relevant_documents, metadata)
         VALUES ($1, $2, $3, $4, $5) RETURNING *`,
        [
          session.id,
          messageType,
          content,
          JSON.stringify(relevantDocuments),
          JSON.stringify(metadata)
        ]
      );

      // Update session context with latest relevant documents and metadata
      const currentContext = session.context || {};
      let updatedContext = { ...currentContext };
      
      // L∆∞u t√†i li·ªáu li√™n quan v√†o context
      if (relevantDocuments && relevantDocuments.length > 0) {
        updatedContext.lastRelevantDocuments = relevantDocuments;
      }
      
      // L∆∞u metadata v√†o context
      if (metadata) {
        // N·∫øu l√† c√¢u tr·∫£ l·ªùi, l∆∞u th√¥ng tin ph√¢n t√≠ch
        if (messageType === 'answer' && metadata.analysisResult) {
          updatedContext.lastAnalysisResult = metadata.analysisResult;
        }
        
        // N·∫øu c√≥ intent list_documents, l∆∞u th√¥ng tin
        if (metadata.analysisResult && metadata.analysisResult.intent === 'list_documents') {
          updatedContext.lastIntent = 'list_documents';
        }
        
        // L∆∞u c√¢u h·ªèi g·ªëc
        if (messageType === 'question') {
          updatedContext.lastQuestion = content;
        }
      }
      
      // C·∫≠p nh·∫≠t context v√† last_activity
      await pool.query(
        'UPDATE conversations SET context = $1, last_activity = NOW() WHERE session_id = $2',
        [JSON.stringify(updatedContext), sessionId]
      );
      
      console.log(`üí¨ Saved ${messageType} to session ${sessionId}: ${result.rows[0].id}`);
      return result.rows[0];
    } catch (error) {
      console.error(`‚ùå Error saving ${messageType} to session ${sessionId}:`, error);
      return null; // Return null instead of throwing to prevent API failures
    }
  }

  // Get conversation history
  async getConversationHistory(sessionId, limit = 10) {
    try {
      const sessionQuery = await pool.query(
        'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );

      if (sessionQuery.rows.length === 0) {
        console.log(`‚ö†Ô∏è Session ${sessionId} not found for history`);
        return [];
      }

      const session = sessionQuery.rows[0];
      
      const result = await pool.query(
        `SELECT * FROM conversation_messages 
         WHERE conversation_id = $1 
         ORDER BY created_at DESC 
         LIMIT $2`,
        [session.id, limit]
      );

      console.log(`üìö Retrieved ${result.rows.length} messages for session ${sessionId} (conversation_id: ${session.id})`);
      return result.rows.reverse(); // Return in chronological order
    } catch (error) {
      console.error('Error getting conversation history:', error);
      return [];
    }
  }

  // Update session context
  async updateSessionContext(sessionId, newContext) {
    try {
      const session = await this.getOrCreateSession(sessionId);
      const currentContext = session.context || {};
      const updatedContext = { ...currentContext, ...newContext };

      await pool.query(
        'UPDATE conversations SET context = $1, last_activity = CURRENT_TIMESTAMP WHERE session_id = $2',
        [JSON.stringify(updatedContext), sessionId]
      );

      return updatedContext;
    } catch (error) {
      console.error('Error updating session context:', error);
      throw error;
    }
  }

  // Get session context
  async getSessionContext(sessionId) {
    try {
      const sessionQuery = await pool.query(
        'SELECT context FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );
      
      return sessionQuery.rows.length > 0 ? sessionQuery.rows[0].context || {} : {};
    } catch (error) {
      console.error('Error getting session context:', error);
      return {};
    }
  }

  /**
   * Gi·∫£i quy·∫øt c√°c tham chi·∫øu trong c√¢u h·ªèi ng∆∞·ªùi d√πng s·ª≠ d·ª•ng AI
   * 
   * @param {string} sessionId - ID phi√™n h·ªôi tho·∫°i
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @returns {Object} K·∫øt qu·∫£ gi·∫£i quy·∫øt tham chi·∫øu
   */
  async resolveReferences(sessionId, question) {
    try {
      console.log(`üß† Ph√¢n t√≠ch tham chi·∫øu cho c√¢u h·ªèi: "${question}"`);
      
      // Get session context directly without creating new session
      const sessionQuery = await pool.query(
        'SELECT context FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );
      
      const context = sessionQuery.rows.length > 0 ? sessionQuery.rows[0].context : {};
      const history = await this.getConversationHistory(sessionId, 10); // L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i
      
      // Ki·ªÉm tra n·∫øu l√† c√¢u h·ªèi ƒë·∫ßu ti√™n trong phi√™n h·ªôi tho·∫°i, kh√¥ng xem l√† tham chi·∫øu
      if (history.length <= 1) {
        console.log(`‚ö†Ô∏è Phi√™n h·ªôi tho·∫°i m·ªõi ho·∫∑c kh√¥ng c√≥ l·ªãch s·ª≠, kh√¥ng coi l√† tham chi·∫øu`);
        return { resolvedQuestion: question, hasReference: false };
      }
      
      // Ki·ªÉm tra c√°c t·ª´ kh√≥a tham chi·∫øu ph·ªï bi·∫øn
      const referenceKeywords = [
        't√†i li·ªáu ƒë√≥', 't√†i li·ªáu n√†y', 'file ƒë√≥', 'file n√†y', 
        'quy ƒë·ªãnh ƒë√≥', 'quy ƒë·ªãnh n√†y', 'quy tr√¨nh ƒë√≥', 'quy tr√¨nh n√†y',
        'n√≥', 'ƒë√≥', 'n√†y', 'chi ti·∫øt h∆°n', 'n√≥i th√™m', 'gi·∫£i th√≠ch th√™m',
        'cho t√¥i bi·∫øt', 'cho t√¥i xem', 'th√¥ng tin v·ªÅ', 'th√¥ng tin c·ªßa'
      ];
      
      // Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a t·ª´ kh√≥a tham chi·∫øu
      const questionLower = question.toLowerCase();
      const hasReferenceKeyword = referenceKeywords.some(keyword => questionLower.includes(keyword));
      
      // N·∫øu c√¢u h·ªèi qu√° ng·∫Øn ho·∫∑c c√≥ t·ª´ kh√≥a tham chi·∫øu r√µ r√†ng
      const isShortQuestion = question.split(' ').length <= 5;
      const likelyHasReference = hasReferenceKeyword || isShortQuestion;
      
      if (likelyHasReference) {
        // L·∫•y th√¥ng tin t·ª´ c√¢u tr·∫£ l·ªùi g·∫ßn nh·∫•t c√≥ t√†i li·ªáu li√™n quan
        let referencedDocuments = [];
        let previousContext = null;
        
        // T√¨m tin nh·∫Øn g·∫ßn nh·∫•t c√≥ t√†i li·ªáu li√™n quan
        for (const message of history.slice().reverse()) {
          if (message.message_type === 'answer' && message.relevant_documents && message.relevant_documents.length > 0) {
            referencedDocuments = message.relevant_documents;
            
            // L·∫•y th√™m ng·ªØ c·∫£nh t·ª´ metadata n·∫øu c√≥
            if (message.metadata) {
              try {
                const metadata = typeof message.metadata === 'string' ? JSON.parse(message.metadata) : message.metadata;
                previousContext = metadata.contextInfo || metadata.analysisResult;
              } catch (e) {
                console.error('Error parsing message metadata:', e);
              }
            }
            
            break;
          }
        }
        
        // N·∫øu c√≥ t√†i li·ªáu li√™n quan
        if (referencedDocuments.length > 0) {
          // N·∫øu l√† c√¢u h·ªèi v·ªÅ t√†i li·ªáu c·ª• th·ªÉ
          if (questionLower.includes('t√†i li·ªáu') || questionLower.includes('file') || 
              questionLower.includes('quy ƒë·ªãnh') || questionLower.includes('quy tr√¨nh')) {
            
            // S·ª≠ d·ª•ng t√†i li·ªáu ƒë·∫ßu ti√™n
            const doc = referencedDocuments[0];
            const resolvedQuestion = `th√¥ng tin v·ªÅ t√†i li·ªáu "${doc.name}": ${question}`;
            
            console.log(`üîó Ph√°t hi·ªán tham chi·∫øu ƒë·∫øn t√†i li·ªáu: ${doc.name}`);
            console.log(`üîó C√¢u h·ªèi ƒë√£ gi·∫£i quy·∫øt tham chi·∫øu: ${resolvedQuestion}`);
            
            return {
              resolvedQuestion,
              hasReference: true,
              referencedDocuments: [doc],
              previousContext,
              analysis: {
                confidence: 85,
                explanation: `C√¢u h·ªèi tham chi·∫øu ƒë·∫øn t√†i li·ªáu "${doc.name}" t·ª´ h·ªôi tho·∫°i tr∆∞·ªõc`
              }
            };
          }
          // N·∫øu l√† c√¢u h·ªèi chung v·ªÅ ch·ªß ƒë·ªÅ
          else {
            // S·ª≠ d·ª•ng t√†i li·ªáu ƒë·∫ßu ti√™n
            const doc = referencedDocuments[0];
            const resolvedQuestion = `${question} trong t√†i li·ªáu "${doc.name}"`;
            
            console.log(`üîó Ph√°t hi·ªán tham chi·∫øu ng·∫ßm ƒë·∫øn ch·ªß ƒë·ªÅ: ${doc.name}`);
            console.log(`üîó C√¢u h·ªèi ƒë√£ gi·∫£i quy·∫øt tham chi·∫øu: ${resolvedQuestion}`);
            
            return {
              resolvedQuestion,
              hasReference: true,
              referencedDocuments: [doc],
              previousContext,
              analysis: {
                confidence: 75,
                explanation: `C√¢u h·ªèi c√≥ th·ªÉ tham chi·∫øu ƒë·∫øn ch·ªß ƒë·ªÅ "${doc.name}" t·ª´ h·ªôi tho·∫°i tr∆∞·ªõc`
              }
            };
          }
        }
      }
      
      // S·ª≠ d·ª•ng GeminiAiService ƒë·ªÉ ph√¢n t√≠ch tham chi·∫øu
      const GeminiAiService = require('../ai/geminiAiService');
      const aiService = new GeminiAiService();
      
      // G·ªçi ph∆∞∆°ng th·ª©c AI ƒë·ªÉ ph√¢n t√≠ch tham chi·∫øu
      const analysis = await aiService.detectReferences(question, history, context);
      
      if (!analysis.hasReference) {
        console.log(`üîç AI kh√¥ng ph√°t hi·ªán tham chi·∫øu trong c√¢u h·ªèi`);
        return {
          resolvedQuestion: question,
          hasReference: false,
          analysis: {
            confidence: analysis.confidence,
            explanation: analysis.explanation
          }
        };
      }
      
      console.log(`üîç AI ph√°t hi·ªán tham chi·∫øu trong c√¢u h·ªèi (ƒë·ªô tin c·∫≠y: ${analysis.confidence}%)`);
      console.log(`   - Gi·∫£i th√≠ch: ${analysis.explanation}`);

      // N·∫øu AI ƒë√£ gi·∫£i quy·∫øt tham chi·∫øu, s·ª≠ d·ª•ng k·∫øt qu·∫£ ƒë√≥
      if (analysis.resolvedQuestion && analysis.resolvedQuestion !== question) {
        console.log(`‚úÖ C√¢u h·ªèi ƒë√£ gi·∫£i quy·∫øt tham chi·∫øu: "${analysis.resolvedQuestion}"`);
        return {
          resolvedQuestion: analysis.resolvedQuestion,
          hasReference: true,
          referencedDocument: analysis.referencedDocument,
          analysis: {
            confidence: analysis.confidence,
            explanation: analysis.explanation
          }
        };
      }
      
      // N·∫øu AI ph√°t hi·ªán tham chi·∫øu nh∆∞ng kh√¥ng th·ªÉ gi·∫£i quy·∫øt
      // T√¨m t√†i li·ªáu li√™n quan trong l·ªãch s·ª≠
      let referencedDocuments = [];
      
      // Ki·ªÉm tra ng·ªØ c·∫£nh phi√™n tr∆∞·ªõc
      if (context.lastRelevantDocuments && context.lastRelevantDocuments.length > 0) {
        referencedDocuments = context.lastRelevantDocuments;
      } else {
        // T√¨m trong tin nh·∫Øn g·∫ßn ƒë√¢y
        for (const message of history.slice().reverse()) {
          if (message.relevant_documents && Array.isArray(message.relevant_documents)) {
            if (message.relevant_documents.length > 0) {
              referencedDocuments = message.relevant_documents;
              break;
            }
          }
        }
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o
      if (referencedDocuments.length === 0) {
        return { 
          resolvedQuestion: question, 
          hasReference: true,
          error: 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥.',
          analysis: {
            confidence: analysis.confidence,
            explanation: analysis.explanation
          }
        };
      }
        
      // N·∫øu ch·ªâ c√≥ m·ªôt t√†i li·ªáu, s·ª≠ d·ª•ng n√≥
      if (referencedDocuments.length === 1) {
        const resolvedQuestion = `th√¥ng tin v·ªÅ t√†i li·ªáu "${referencedDocuments[0].name}": ${question}`;
        
        console.log(`üîó Tham chi·∫øu ƒë·∫øn t√†i li·ªáu: "${referencedDocuments[0].name}"`);
        console.log(`üîó C√¢u h·ªèi gi·∫£i quy·∫øt: "${resolvedQuestion}"`);
        
        return {
          resolvedQuestion,
          hasReference: true,
          referencedDocuments: [referencedDocuments[0]],
          analysis: {
            confidence: analysis.confidence,
            explanation: analysis.explanation
          }
        };
      }
      
      // N·∫øu c√≥ nhi·ªÅu t√†i li·ªáu, c·∫ßn ph√¢n t√≠ch th√™m
      // S·ª≠ d·ª•ng t√†i li·ªáu g·∫ßn nh·∫•t trong l·ªãch s·ª≠
      const resolvedQuestion = `th√¥ng tin v·ªÅ t√†i li·ªáu "${referencedDocuments[0].name}": ${question}`;
      
      console.log(`üîó Tham chi·∫øu ƒë·∫øn t√†i li·ªáu g·∫ßn nh·∫•t: "${referencedDocuments[0].name}"`);
      console.log(`üîó C√¢u h·ªèi gi·∫£i quy·∫øt: "${resolvedQuestion}"`);
      
      return {
        resolvedQuestion,
        hasReference: true,
        referencedDocuments: [referencedDocuments[0]],
        analysis: {
          confidence: analysis.confidence,
          explanation: analysis.explanation
        }
      };

    } catch (error) {
      console.error('Error resolving references:', error);
      return { resolvedQuestion: question, hasReference: false };
    }
  }

  // Expire session
  async expireSession(sessionId) {
    try {
      await pool.query(
        'UPDATE conversations SET is_active = false WHERE session_id = $1',
        [sessionId]
      );
      console.log(`‚è∞ Expired conversation session: ${sessionId}`);
    } catch (error) {
      console.error('Error expiring session:', error);
    }
  }

  // Clean up old conversations (run periodically)
  async cleanupOldConversations() {
    try {
      const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 hours ago
      
      const result = await pool.query(
        'UPDATE conversations SET is_active = false WHERE last_activity < $1 AND is_active = true',
        [cutoffTime]
      );

      console.log(`üßπ Cleaned up ${result.rowCount} old conversations`);
      return result.rowCount;
    } catch (error) {
      console.error('Error cleaning up conversations:', error);
      return 0;
    }
  }

  // Get conversation analytics
  async getConversationStats(sessionId) {
    try {
      const session = await this.getOrCreateSession(sessionId);
      
      const stats = await pool.query(`
        SELECT 
          COUNT(*) as total_messages,
          COUNT(CASE WHEN message_type = 'question' THEN 1 END) as questions_count,
          COUNT(CASE WHEN message_type = 'answer' THEN 1 END) as answers_count,
          MIN(created_at) as first_message,
          MAX(created_at) as last_message
        FROM conversation_messages 
        WHERE conversation_id = $1
      `, [session.id]);

      return {
        sessionId,
        ...stats.rows[0],
        duration: session.last_activity - session.started_at
      };
    } catch (error) {
      console.error('Error getting conversation stats:', error);
      return null;
    }
  }
}

module.exports = ConversationService; 