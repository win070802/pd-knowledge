const { pool } = require('../../config/database');
const { v4: uuidv4 } = require('uuid');

class ConversationService {
  constructor() {
    this.sessionTimeout = 60 * 60 * 1000; // 60 minutes (increased from 30)
  }

  // Create or get existing conversation session
  async getOrCreateSession(sessionId = null, userId = null) {
    try {
      if (!sessionId) {
        sessionId = uuidv4();
      }

      // Check if session exists and is active
      const existingSession = await pool.query(
        'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );

      if (existingSession.rows.length > 0) {
        const session = existingSession.rows[0];
        
        // Get current time from database to ensure UTC consistency
        const timeQuery = await pool.query('SELECT EXTRACT(EPOCH FROM NOW()) * 1000 as current_time_ms');
        const nowUTC = parseInt(timeQuery.rows[0].current_time_ms);
        
        // Get last activity time in milliseconds
        const lastActivity = new Date(session.last_activity);
        const lastActivityUTC = lastActivity.getTime();
        const timeDiff = nowUTC - lastActivityUTC;
        
        console.log(`‚è∞ Session ${sessionId}:`);
        console.log(`   Last activity: ${lastActivity.toISOString()} (${lastActivityUTC})`);
        console.log(`   Current time (DB): ${new Date(nowUTC).toISOString()} (${nowUTC})`);
        console.log(`   Time diff: ${timeDiff}ms (timeout: ${this.sessionTimeout}ms)`);
        
        if (timeDiff > this.sessionTimeout) {
          console.log(`‚è∞ Session expired, creating new one`);
          // Expire old session and create new one
          await this.expireSession(sessionId);
          return await this.createNewSession(sessionId, userId);
        }

        // Update last activity using database NOW() function  
        await pool.query(
          'UPDATE conversations SET last_activity = NOW() WHERE session_id = $1',
          [sessionId]
        );
        
        // Re-fetch updated session
        const updatedSession = await pool.query(
          'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
          [sessionId]
        );
        
        console.log(`üîÑ Updated session activity: ${sessionId}`);
        return updatedSession.rows[0];
      }

      return await this.createNewSession(sessionId, userId);
    } catch (error) {
      console.error('Error getting/creating session:', error);
      throw error;
    }
  }

  // Create new conversation session
  async createNewSession(sessionId, userId = null, retryCount = 0) {
    try {
      // If sessionId conflicts, generate a new one (max 3 retries)
      if (retryCount > 0 || !sessionId) {
        sessionId = uuidv4();
      }

      // Use current UTC timestamp
      const currentTimestamp = new Date();
      
      const result = await pool.query(
        `INSERT INTO conversations (session_id, user_id, context, started_at, last_activity) 
         VALUES ($1, $2, $3, NOW(), NOW()) RETURNING *`,
        [sessionId, userId, JSON.stringify({})]
      );

              console.log(`‚úÖ Created new conversation session: ${sessionId}`);
      return result.rows[0];
    } catch (error) {
      // Handle unique constraint violation by retrying with new UUID
      if (error.code === '23505' && retryCount < 3) {
        console.log(`üîÑ Session ID conflict, retrying with new UUID (attempt ${retryCount + 1})`);
        return await this.createNewSession(null, userId, retryCount + 1);
      }
      
      console.error('Error creating new session:', error);
      throw error;
    }
  }

  // Save message to conversation
  async saveMessage(sessionId, messageType, content, relevantDocuments = [], metadata = {}) {
    try {
      // Get session without creating new one to avoid conflicts
      const sessionQuery = await pool.query(
        'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );

      if (sessionQuery.rows.length === 0) {
        console.error(`‚ùå Session ${sessionId} not found for saving message`);
        return null;
      }

      const session = sessionQuery.rows[0];
      
      const result = await pool.query(
        `INSERT INTO conversation_messages 
         (conversation_id, message_type, content, relevant_documents, metadata)
         VALUES ($1, $2, $3, $4, $5) RETURNING *`,
        [
          session.id,
          messageType,
          content,
          JSON.stringify(relevantDocuments),
          JSON.stringify(metadata)
        ]
      );

      // Update session context with latest relevant documents
      if (relevantDocuments.length > 0) {
        await pool.query(
          'UPDATE conversations SET context = $1, last_activity = NOW() WHERE session_id = $2',
          [JSON.stringify({ lastRelevantDocuments: relevantDocuments }), sessionId]
        );
      } else {
        // Update just the last_activity even if no documents
        await pool.query(
          'UPDATE conversations SET last_activity = NOW() WHERE session_id = $1',
          [sessionId]
        );
      }

      console.log(`üí¨ Saved ${messageType} to session ${sessionId}: ${result.rows[0].id}`);
      return result.rows[0];
    } catch (error) {
      console.error(`‚ùå Error saving ${messageType} to session ${sessionId}:`, error);
      return null; // Return null instead of throwing to prevent API failures
    }
  }

  // Get conversation history
  async getConversationHistory(sessionId, limit = 10) {
    try {
      const sessionQuery = await pool.query(
        'SELECT * FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );

      if (sessionQuery.rows.length === 0) {
        console.log(`‚ö†Ô∏è Session ${sessionId} not found for history`);
        return [];
      }

      const session = sessionQuery.rows[0];
      
      const result = await pool.query(
        `SELECT * FROM conversation_messages 
         WHERE conversation_id = $1 
         ORDER BY created_at DESC 
         LIMIT $2`,
        [session.id, limit]
      );

      console.log(`üìö Retrieved ${result.rows.length} messages for session ${sessionId} (conversation_id: ${session.id})`);
      return result.rows.reverse(); // Return in chronological order
    } catch (error) {
      console.error('Error getting conversation history:', error);
      return [];
    }
  }

  // Update session context
  async updateSessionContext(sessionId, newContext) {
    try {
      const session = await this.getOrCreateSession(sessionId);
      const currentContext = session.context || {};
      const updatedContext = { ...currentContext, ...newContext };

      await pool.query(
        'UPDATE conversations SET context = $1, last_activity = CURRENT_TIMESTAMP WHERE session_id = $2',
        [JSON.stringify(updatedContext), sessionId]
      );

      return updatedContext;
    } catch (error) {
      console.error('Error updating session context:', error);
      throw error;
    }
  }

  // Get session context
  async getSessionContext(sessionId) {
    try {
      const sessionQuery = await pool.query(
        'SELECT context FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );
      
      return sessionQuery.rows.length > 0 ? sessionQuery.rows[0].context || {} : {};
    } catch (error) {
      console.error('Error getting session context:', error);
      return {};
    }
  }

  /**
   * Gi·∫£i quy·∫øt c√°c tham chi·∫øu trong c√¢u h·ªèi ng∆∞·ªùi d√πng
   * 
   * Thu·∫≠t to√°n x·ª≠ l√Ω:
   * 1. T√¨m t√†i li·ªáu t·ª´ ng·ªØ c·∫£nh (context) c·ªßa phi√™n h·ªôi tho·∫°i ho·∫∑c l·ªãch s·ª≠ h·ªôi tho·∫°i
   * 2. Ph√¢n t√≠ch c√¢u h·ªèi ƒë·ªÉ t√¨m c√°c tham chi·∫øu tr·ª±c ti·∫øp ("t√†i li·ªáu n√†y", "s∆° ƒë·ªì ƒë√≥"...)
   * 3. Ph√°t hi·ªán tham chi·∫øu ng·∫ßm (c√¢u ng·∫Øn, chi ti·∫øt v·ªÅ n·ªôi dung ƒë√£ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p)
   * 4. Ph√¢n t√≠ch t·ª´ kh√≥a ch·ªß ƒë·ªÅ ƒë·ªÉ ph√°t hi·ªán ng∆∞·ªùi d√πng ƒëang n√≥i v·ªÅ t√†i li·ªáu c·ª• th·ªÉ
   * 5. Ch·∫•m ƒëi·ªÉm m·ª©c ƒë·ªô ph√π h·ª£p c·ªßa t·ª´ng t√†i li·ªáu v·ªõi c√¢u h·ªèi
   * 6. Ch·ªçn t√†i li·ªáu ph√π h·ª£p nh·∫•t v√† thay th·∫ø c√°c tham chi·∫øu trong c√¢u h·ªèi
   * 
   * @param {string} sessionId - ID phi√™n h·ªôi tho·∫°i
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @returns {Object} K·∫øt qu·∫£ gi·∫£i quy·∫øt tham chi·∫øu
   */
  async resolveReferences(sessionId, question) {
    try {
      // Get session context directly without creating new session
      const sessionQuery = await pool.query(
        'SELECT context FROM conversations WHERE session_id = $1 AND is_active = true',
        [sessionId]
      );
      
      const context = sessionQuery.rows.length > 0 ? sessionQuery.rows[0].context : {};
      const history = await this.getConversationHistory(sessionId, 15); // TƒÉng s·ªë l∆∞·ª£ng tin nh·∫Øn l·∫•y t·ª´ l·ªãch s·ª≠

      // Ki·ªÉm tra n·∫øu l√† c√¢u h·ªèi ƒë·∫ßu ti√™n trong phi√™n h·ªôi tho·∫°i, kh√¥ng xem l√† tham chi·∫øu
      if (history.length <= 1) {
        console.log(`‚ö†Ô∏è Phi√™n h·ªôi tho·∫°i m·ªõi ho·∫∑c kh√¥ng c√≥ l·ªãch s·ª≠, kh√¥ng coi l√† tham chi·∫øu`);
        return { resolvedQuestion: question, hasReference: false };
      }

      // M·ªü r·ªông danh s√°ch t·ª´ kh√≥a tham chi·∫øu
      const referenceKeywords = [
        't√†i li·ªáu ƒë√≥', 'document ƒë√≥', 'file ƒë√≥', 'quy ƒë·ªãnh ƒë√≥',
        't√†i li·ªáu n√†y', 'document n√†y', 'file n√†y', 'quy ƒë·ªãnh n√†y',
        't√†i li·ªáu tr∆∞·ªõc', 'file tr∆∞·ªõc', 'c√°i ƒë√≥', 'c√°i n√†y',
        'n√≥', 'ƒë√≥', 'n√†y', 'chi ti·∫øt', 'th√¥ng tin', 'n·ªôi dung'
      ];

      // T·ª´ kh√≥a d·ªÖ nh·∫ßm l·∫´n - c·∫ßn x√©t trong ng·ªØ c·∫£nh c·ª• th·ªÉ
      const contextualKeywords = [
        's∆° ƒë·ªì', 't√†i li·ªáu', 'm√¥ t·∫£', 'ph√¢n t√≠ch', 'tr√™n',
        't√≥m t·∫Øt', 'h∆∞·ªõng d·∫´n', 'quy tr√¨nh', 'quy ƒë·ªãnh'
      ];

      const questionLower = question.toLowerCase();
      
      // Ki·ªÉm tra c√°c t·ª´ kh√≥a ch·ªâ ra r·∫±ng ƒë√¢y l√† truy v·∫•n danh s√°ch, kh√¥ng ph·∫£i tham chi·∫øu
      const listQueryKeywords = ['danh s√°ch', 'li·ªát k√™', 'c√≥ nh·ªØng', 'c√≥ m·∫•y', 'c√≥ bao nhi√™u'];
      const isListQuery = listQueryKeywords.some(keyword => questionLower.includes(keyword));
      
      // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a t√™n t√†i li·ªáu c·ª• th·ªÉ
      const hasSpecificDocumentName = questionLower.includes('.pdf') || questionLower.includes('.doc') || 
                                     questionLower.includes('.xlsx') || questionLower.includes('.ppt');
      
      // L·∫•y danh s√°ch c√¥ng ty t·ª´ database
      const companiesQuery = await pool.query('SELECT code, full_name FROM companies');
      const companies = companiesQuery.rows || [];
      
      // T·∫°o danh s√°ch t·ª´ kh√≥a c√¥ng ty t·ª´ database
      const companyKeywords = [];
      companies.forEach(company => {
        if (company.code) companyKeywords.push(company.code.toLowerCase());
        if (company.full_name) {
          // Th√™m c·∫£ t√™n ƒë·∫ßy ƒë·ªß v√† c√°c ph·∫ßn c·ªßa t√™n
          companyKeywords.push(company.full_name.toLowerCase());
          const nameParts = company.full_name.toLowerCase().split(' ');
          nameParts.forEach(part => {
            if (part.length > 2) companyKeywords.push(part);
          });
        }
      });
      
      // Th√™m m·ªôt s·ªë t·ª´ kh√≥a m·∫∑c ƒë·ªãnh cho c√°c c√¥ng ty ph·ªï bi·∫øn
      const defaultCompanyKeywords = ['ph√°t ƒë·∫°t', 'phat dat', 'holding', 'invest'];
      defaultCompanyKeywords.forEach(keyword => {
        if (!companyKeywords.includes(keyword)) {
          companyKeywords.push(keyword);
        }
      });
      
      // Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ch·ª©a t·ª´ kh√≥a c√¥ng ty kh√¥ng
      const hasCompanyKeyword = companyKeywords.some(keyword => questionLower.includes(keyword));
      
      // N·∫øu l√† truy v·∫•n danh s√°ch k·∫øt h·ª£p v·ªõi t√™n c√¥ng ty ho·∫∑c ph√≤ng ban, KH√îNG coi l√† tham chi·∫øu
      if (isListQuery) {
        console.log(`‚ö†Ô∏è C√¢u h·ªèi l√† truy v·∫•n danh s√°ch, kh√¥ng coi l√† tham chi·∫øu`);
        return { resolvedQuestion: question, hasReference: false };
      }
      
      // N·∫øu c√¢u h·ªèi ch·ª©a t√™n t√†i li·ªáu c·ª• th·ªÉ, KH√îNG coi l√† tham chi·∫øu
      if (hasSpecificDocumentName) {
        return { resolvedQuestion: question, hasReference: false };
      }
      
      // Ki·ªÉm tra c√¢u h·ªèi v·ªÅ ph√≤ng ban
      const departmentKeywords = ['ban', 'ph√≤ng', 'b·ªô ph·∫≠n', 'team', 'nh√≥m', 'ƒë·ªôi'];
      const isDepartmentQuestion = departmentKeywords.some(keyword => 
        questionLower.includes(keyword + ' ') || // ƒê·∫£m b·∫£o "ban" l√† t·ª´ ri√™ng, kh√¥ng ph·∫£i ph·∫ßn c·ªßa t·ª´ kh√°c
        questionLower.startsWith(keyword + ' ')
      );
      
      if (isDepartmentQuestion) {
        console.log(`‚ö†Ô∏è C√¢u h·ªèi v·ªÅ ph√≤ng ban, kh√¥ng coi l√† tham chi·∫øu`);
        return { resolvedQuestion: question, hasReference: false };
      }
      
      // Ki·ªÉm tra n·∫øu c√¢u h·ªèi l√† c√¢u h·ªèi chung kh√¥ng li√™n quan ƒë·∫øn t√†i li·ªáu
      const generalQuestionPatterns = [
        'vi·ªát nam', 'th·∫ø gi·ªõi', 'l√† g√¨', 'ƒë·ªãnh nghƒ©a', 'kh√°i ni·ªám',
        'bao nhi√™u ng∆∞·ªùi', 'd√¢n s·ªë', 'di·ªán t√≠ch', 'th·ªß ƒë√¥',
        't·ªïng th·ªëng', 't·∫°i sao', 'v√¨ sao', 'l√Ω do', 'nguy√™n nh√¢n'
      ];
      
      const isGeneralQuestion = generalQuestionPatterns.some(pattern => questionLower.includes(pattern));
      
      // N·∫øu l√† c√¢u h·ªèi chung kh√¥ng li√™n quan ƒë·∫øn t√†i li·ªáu, KH√îNG coi l√† tham chi·∫øu
      if (isGeneralQuestion && !hasCompanyKeyword) {
        return { resolvedQuestion: question, hasReference: false };
      }
      
      // Ph√¢n t√≠ch t√†i li·ªáu t·ª´ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
      let lastDocumentsInHistory = [];
      let lastMentionedDocName = '';
      
      if (history.length > 0) {
        // T√¨m t√†i li·ªáu trong l·ªãch s·ª≠ tr·∫£ l·ªùi
        const lastMessages = history.slice().reverse();
        
        // L∆∞u tr·ªØ danh s√°ch t√†i li·ªáu ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong c·∫£ c√¢u h·ªèi v√† tr·∫£ l·ªùi
        for (const msg of lastMessages) {
          // Ki·ªÉm tra tin nh·∫Øn tr·∫£ l·ªùi
          if (msg.message_type === 'answer' && msg.relevant_documents && 
              Array.isArray(msg.relevant_documents) && msg.relevant_documents.length > 0) {
            lastDocumentsInHistory = msg.relevant_documents;
            
            // N·∫øu c√¢u tr·∫£ l·ªùi c√≥ nh·∫Øc ƒë·∫øn t√™n t√†i li·ªáu c·ª• th·ªÉ
            const content = msg.content.toLowerCase();
            for (const doc of msg.relevant_documents) {
              if (doc.name && content.includes(doc.name.toLowerCase())) {
                lastMentionedDocName = doc.name;
                break;
              }
            }
            
            if (lastMentionedDocName || lastDocumentsInHistory.length > 0) break;
          }

          // Ki·ªÉm tra tin nh·∫Øn c√¢u h·ªèi ƒë·ªÉ t√¨m d·∫•u hi·ªáu c·ªßa vi·ªác n√≥i v·ªÅ t√†i li·ªáu
          if (msg.message_type === 'question') {
            const contentLower = msg.content.toLowerCase();
            
            // N·∫øu c√¢u h·ªèi tr∆∞·ªõc ƒë√≥ c√≥ n√≥i v·ªÅ t√†i li·ªáu c·ª• th·ªÉ
            if (contentLower.includes('t√†i li·ªáu') || 
                contentLower.includes('file') || 
                contentLower.includes('document') ||
                contentLower.includes('s∆° ƒë·ªì') ||
                contentLower.includes('quy ƒë·ªãnh')) {
              // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi ngay sau c√¢u h·ªèi n√†y
              const answerIndex = lastMessages.findIndex(m => m.id === msg.id) - 1;
              if (answerIndex >= 0 && lastMessages[answerIndex].message_type === 'answer') {
                const answer = lastMessages[answerIndex];
                if (answer.relevant_documents && Array.isArray(answer.relevant_documents) && 
                    answer.relevant_documents.length > 0) {
                  if (lastDocumentsInHistory.length === 0) {
                    lastDocumentsInHistory = answer.relevant_documents;
                  }
                }
              }
            }
          }
        }
      }

      // X√°c ƒë·ªãnh xem c√¢u h·ªèi c√≥ tham chi·∫øu ƒë·∫øn t√†i li·ªáu kh√¥ng
      const hasExplicitReference = referenceKeywords.some(keyword => 
        questionLower.includes(keyword)
      );

      // X√°c ƒë·ªãnh tham chi·∫øu ng·ªØ c·∫£nh (ph·∫£i k·∫øt h·ª£p v·ªõi c√°c ƒëi·ªÅu ki·ªán kh√°c)
      let hasContextualReference = false;
      if (lastDocumentsInHistory.length > 0) {
        hasContextualReference = contextualKeywords.some(keyword => 
          questionLower.includes(keyword)
        );
      }
      
      // X√°c ƒë·ªãnh xem c√¢u h·ªèi c√≥ ph·∫£i l√† tham chi·∫øu ng·∫ßm kh√¥ng
      // 1. N·∫øu c√≥ t√†i li·ªáu tr∆∞·ªõc ƒë√≥ v√† c√¢u h·ªèi hi·ªán t·∫°i ng·∫Øn
      // 2. Ho·∫∑c ch·ª©a t·ª´ kh√≥a li√™n quan ƒë·∫øn n·ªôi dung t√†i li·ªáu
      // 3. Ho·∫∑c l√† c√¢u h·ªèi ti·∫øp theo sau khi ƒë√£ hi·ªÉn th·ªã danh s√°ch t√†i li·ªáu
      const hasImplicitReference = lastDocumentsInHistory.length > 0 && (
        (question.length < 50 && 
         (questionLower.includes('chi ti·∫øt') ||
          questionLower.includes('t√≥m t·∫Øt') ||
          questionLower.includes('n·ªôi dung') ||
          questionLower.startsWith('trong ƒë√≥'))) ||
        (history.length > 1 && 
         history[history.length-2].message_type === 'answer' &&
         history[history.length-2].content.includes('C√°c quy ƒë·ªãnh v√† quy tr√¨nh') &&
         questionLower.startsWith('chi ti·∫øt'))
      );

      // Th√™m logic nh·∫≠n di·ªán khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ m·ªôt t√†i li·ªáu c·ª• th·ªÉ 
      // m√† kh√¥ng d√πng tham chi·∫øu tr·ª±c ti·∫øp
      let hasTopicReference = false;
      let topicReferenceScore = 0;
      
      if (lastDocumentsInHistory.length > 0) {
        for (const doc of lastDocumentsInHistory) {
          if (!doc.name) continue;
          
          // T√°ch t√™n t√†i li·ªáu th√†nh c√°c t·ª´ kh√≥a
          const docNameLower = doc.name.toLowerCase();
          const keyPhrases = docNameLower.split(/[\s\-\.\_\(\)]+/)
            .filter(part => part.length > 3)
            .map(part => part.replace(/[^a-z0-9√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/g, ''))
            .filter(part => part.length > 3);
          
          // Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a quan tr·ªçng trong t√™n t√†i li·ªáu
          const topicMatches = keyPhrases.filter(phrase => questionLower.includes(phrase));
          
          let score = 0;
          
          // N·∫øu c√¢u h·ªèi ch·ª©a √≠t nh·∫•t 1 t·ª´ kh√≥a quan tr·ªçng t·ª´ t√™n t√†i li·ªáu
          if (topicMatches.length > 0) {
            // N·∫øu t√†i li·ªáu c√≥ t·ª´ kh√≥a ƒë·∫∑c bi·ªát v√† c√¢u h·ªèi c≈©ng nh·∫Øc ƒë·∫øn n√≥
            if ((docNameLower.includes('s∆° ƒë·ªì') && questionLower.includes('s∆° ƒë·ªì'))) {
              score += 40;
            }
            if ((docNameLower.includes('quy tr√¨nh') && questionLower.includes('quy tr√¨nh'))) {
              score += 40;
            }
            if ((docNameLower.includes('h∆∞·ªõng d·∫´n') && questionLower.includes('h∆∞·ªõng d·∫´n'))) {
              score += 40;
            }
            if ((docNameLower.includes('quy ƒë·ªãnh') && questionLower.includes('quy ƒë·ªãnh'))) {
              score += 40;
            }
            if ((docNameLower.includes('phap che') || docNameLower.includes('ph√°p ch·∫ø')) && 
                (questionLower.includes('phap che') || questionLower.includes('ph√°p ch·∫ø'))) {
              score += 50;
            }
            
            // ƒêi·ªÉm cho s·ªë l∆∞·ª£ng t·ª´ kh√≥a kh·ªõp
            score += topicMatches.length * 10;
          }
          
          if (score > topicReferenceScore) {
            topicReferenceScore = score;
          }
        }
        
        // Ch·ªâ coi l√† tham chi·∫øu ch·ªß ƒë·ªÅ n·∫øu ƒëi·ªÉm ƒë·ªß cao
        hasTopicReference = topicReferenceScore >= 30;
      }

      // Lo·∫°i tr·ª´ m·ªôt s·ªë tr∆∞·ªùng h·ª£p c√¢u h·ªèi ƒë·∫∑c bi·ªát kh√¥ng ph·∫£i tham chi·∫øu
      const nonReferencePatterns = [
        'c√≥ bao nhi√™u', 'bao nhi√™u', 'c√≥ m·∫•y', 'm·∫•y ng∆∞·ªùi', 
        'c√≥ ai', 'ai l√†', 'l√† ai', '·ªü ƒë√¢u', 'khi n√†o',
        't·∫°i sao', 'v√¨ sao', 'c√≥ ph·∫£i', 'ƒë√∫ng kh√¥ng',
        'danh s√°ch', 'li·ªát k√™'
      ];
      
      // N·∫øu c√¢u h·ªèi ch·ª©a c√°c m·∫´u kh√¥ng tham chi·∫øu v√† kh√¥ng c√≥ tham chi·∫øu r√µ r√†ng
      const containsNonReferencePattern = nonReferencePatterns.some(pattern => 
        questionLower.includes(pattern)
      );
      
      if (containsNonReferencePattern && !hasExplicitReference && topicReferenceScore < 50) {
        return { resolvedQuestion: question, hasReference: false };
      }

      const hasReference = hasExplicitReference || hasImplicitReference || hasTopicReference;

      // N·∫øu kh√¥ng c√≥ tham chi·∫øu, tr·∫£ v·ªÅ c√¢u h·ªèi nguy√™n b·∫£n
      if (!hasReference) {
        return { resolvedQuestion: question, hasReference: false };
      }

      // T√¨m t√†i li·ªáu li√™n quan g·∫ßn nh·∫•t
      let referencedDocuments = [];
      
      // Ki·ªÉm tra ng·ªØ c·∫£nh phi√™n tr∆∞·ªõc
      if (context.lastRelevantDocuments && context.lastRelevantDocuments.length > 0) {
        referencedDocuments = context.lastRelevantDocuments;
      } else if (lastDocumentsInHistory.length > 0) {
        referencedDocuments = lastDocumentsInHistory;
      } else {
        // T√¨m trong tin nh·∫Øn g·∫ßn ƒë√¢y
        for (const message of history.reverse()) {
          if (message.relevant_documents && Array.isArray(message.relevant_documents)) {
            if (message.relevant_documents.length > 0) {
              referencedDocuments = message.relevant_documents;
              break;
            }
          }
        }
      }

      if (referencedDocuments.length === 0) {
        return { 
          resolvedQuestion: question, 
          hasReference: true,
          error: 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥.'
        };
      }
      
      // T√¨m t√†i li·ªáu ph√π h·ª£p nh·∫•t v·ªõi n·ªôi dung c√¢u h·ªèi
      let matchedDocument = null;
      let highestMatchScore = 0;
      
      // C√°c b∆∞·ªõc ch·∫•m ƒëi·ªÉm m·ª©c ƒë·ªô ph√π h·ª£p c·ªßa t√†i li·ªáu:
      // 1. Ch·∫•m ƒëi·ªÉm cho t√™n t√†i li·ªáu ho√†n ch·ªânh
      // 2. Ch·∫•m ƒëi·ªÉm cho t·ª´ng t·ª´ kh√≥a quan tr·ªçng trong t√™n t√†i li·ªáu
      // 3. Ch·∫•m ƒëi·ªÉm cho c√°c lo·∫°i t√†i li·ªáu ƒë·∫∑c bi·ªát nh∆∞ s∆° ƒë·ªì, quy tr√¨nh
      // 4. Ch·∫•m ƒëi·ªÉm cho c√°c c·∫∑p t·ª´ kh√≥a ƒë·∫∑c bi·ªát (vay v·ªën, ph√°p ch·∫ø...)
      // 5. Ch·∫•m ƒëi·ªÉm cho t√†i li·ªáu ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn trong c√¢u tr·∫£ l·ªùi g·∫ßn nh·∫•t
      for (const doc of referencedDocuments) {
        if (!doc.name) continue;
        
        const docNameLower = doc.name.toLowerCase();
        let matchScore = 0;
        
        // T√°ch t√™n t√†i li·ªáu v√† c√¢u h·ªèi th√†nh c√°c t·ª´ kh√≥a
        const docNameParts = docNameLower.split(/[\s\-\.\_\(\)]+/)
          .filter(part => part.length > 3)
          .map(part => part.replace(/[^a-z0-9√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/g, ''))
          .filter(part => part.length > 3);
          
        // Ki·ªÉm tra t√™n ƒë·∫ßy ƒë·ªß
        if (questionLower.includes(docNameLower)) {
          matchScore += 100;
        }
        
        // Ki·ªÉm tra t·ª´ng t·ª´ quan tr·ªçng trong t√™n t√†i li·ªáu
        for (const part of docNameParts) {
          if (part.length > 3 && questionLower.includes(part)) {
            matchScore += 10;
          }
        }
        
        // Ki·ªÉm tra c√°c lo·∫°i t√†i li·ªáu ƒë·∫∑c bi·ªát
        if ((docNameLower.includes('s∆° ƒë·ªì') && questionLower.includes('s∆° ƒë·ªì'))) {
          matchScore += 50;
        }
        if ((docNameLower.includes('quy tr√¨nh') && questionLower.includes('quy tr√¨nh'))) {
          matchScore += 50;
        }
        if ((docNameLower.includes('h∆∞·ªõng d·∫´n') && questionLower.includes('h∆∞·ªõng d·∫´n'))) {
          matchScore += 50;
        }
        if ((docNameLower.includes('quy ƒë·ªãnh') && questionLower.includes('quy ƒë·ªãnh'))) {
          matchScore += 50;
        }
        if ((docNameLower.includes('ban phap che') || docNameLower.includes('ph√°p ch·∫ø')) && 
            (questionLower.includes('phap che') || questionLower.includes('ph√°p ch·∫ø'))) {
          matchScore += 50;
        }
        
        // Ki·ªÉm tra c√°c c·∫∑p t·ª´ kh√≥a ƒë·∫∑c bi·ªát
        const keywordPairs = [
          { doc: 'vay von', question: 'vay v·ªën', score: 70 },
          { doc: 'vay v·ªën', question: 'vay v·ªën', score: 70 },
          { doc: 'phap che', question: 'ph√°p ch·∫ø', score: 70 },
          { doc: 'ph√°p ch·∫ø', question: 'phap che', score: 70 },
          { doc: 'chuc nang', question: 'ch·ª©c nƒÉng', score: 60 },
          { doc: 'ch·ª©c nƒÉng', question: 'chuc nang', score: 60 },
          { doc: 'so do', question: 's∆° ƒë·ªì', score: 60 },
          { doc: 's∆° ƒë·ªì', question: 'so do', score: 60 }
        ];
        
        // T√¨m c√°c c·∫∑p t·ª´ kh√≥a ƒë·∫∑c bi·ªát
        for (const pair of keywordPairs) {
          if (docNameLower.includes(pair.doc) && questionLower.includes(pair.question)) {
            matchScore += pair.score;
          }
        }

        // Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
        if ((docNameLower.includes('quy-trinh-vay-von') || docNameLower.includes('vay von') || docNameLower.includes('vay-von')) && 
            (questionLower.includes('vay v·ªën') || questionLower.includes('vay von'))) {
          matchScore += 80;  // ƒêi·ªÉm cao cho s·ª± tr√πng kh·ªõp n√†y
        }
        
        // N·∫øu t√†i li·ªáu n√†y ƒë√£ ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn trong c√¢u tr·∫£ l·ªùi g·∫ßn nh·∫•t
        if (lastMentionedDocName === doc.name) {
          matchScore += 30;
        }
        
        console.log(`üîç ƒê√°nh gi√° t√†i li·ªáu "${doc.name}": ${matchScore} ƒëi·ªÉm`);
        
        if (matchScore > highestMatchScore) {
          highestMatchScore = matchScore;
          matchedDocument = doc;
        }
      }

      // X√¢y d·ª±ng c√¢u h·ªèi ƒë√£ gi·∫£i quy·∫øt tham chi·∫øu
      let resolvedQuestion = question;
      
      if (matchedDocument && highestMatchScore > 0) {
        // N·∫øu ƒë√£ x√°c ƒë·ªãnh ƒë∆∞·ª£c t√†i li·ªáu c·ª• th·ªÉ
        referenceKeywords.forEach(keyword => {
          const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
          resolvedQuestion = resolvedQuestion.replace(regex, `t√†i li·ªáu "${matchedDocument.name}"`);
        });
        
        // N·∫øu c√¢u h·ªèi ch∆∞a c√≥ s·ª± thay ƒë·ªïi v√† c√≥ v·∫ª l√† tham chi·∫øu ng·∫ßm
        if (resolvedQuestion === question && hasImplicitReference) {
          if (question.length < 30 || 
              questionLower.includes('chi ti·∫øt') || 
              questionLower.includes('t√≥m t·∫Øt')) {
            resolvedQuestion = `chi ti·∫øt v·ªÅ t√†i li·ªáu "${matchedDocument.name}": ${question}`;
          }
        }
      } else if (referencedDocuments.length === 1) {
        // N·∫øu ch·ªâ c√≥ m·ªôt t√†i li·ªáu trong ng·ªØ c·∫£nh
        const doc = referencedDocuments[0];
        referenceKeywords.forEach(keyword => {
          const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
          resolvedQuestion = resolvedQuestion.replace(regex, `t√†i li·ªáu "${doc.name}"`);
        });
        
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng h·ªèi ng·∫Øn g·ªçn
        if (resolvedQuestion === question && hasImplicitReference) {
          if (question.length < 30 || 
              questionLower.includes('chi ti·∫øt') || 
              questionLower.includes('t√≥m t·∫Øt')) {
            resolvedQuestion = `chi ti·∫øt v·ªÅ t√†i li·ªáu "${doc.name}": ${question}`;
          }
        }
      } else {
        // Tr∆∞·ªùng h·ª£p nhi·ªÅu t√†i li·ªáu
        if (hasImplicitReference && question.length < 30) {
          // Ch·ªçn t√†i li·ªáu ƒë·∫ßu ti√™n n·∫øu c√¢u h·ªèi qu√° ng·∫Øn
          const doc = referencedDocuments[0];
          resolvedQuestion = `chi ti·∫øt v·ªÅ t√†i li·ªáu "${doc.name}": ${question}`;
        } else if (hasExplicitReference) {
          // D√πng t√†i li·ªáu ƒë·∫ßu ti√™n n·∫øu kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ h∆°n
          const doc = referencedDocuments[0];
          referenceKeywords.forEach(keyword => {
            const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
            resolvedQuestion = resolvedQuestion.replace(regex, `t√†i li·ªáu "${doc.name}"`);
          });
        }
      }

      console.log(`üîó Reference resolved: "${question}" ‚Üí "${resolvedQuestion}" (match score: ${highestMatchScore})`);
      
      return {
        resolvedQuestion,
        hasReference: true,
        referencedDocuments: matchedDocument ? [matchedDocument] : referencedDocuments,
        originalQuestion: question,
        matchScore: highestMatchScore
      };

    } catch (error) {
      console.error('Error resolving references:', error);
      return { resolvedQuestion: question, hasReference: false };
    }
  }

  // Expire session
  async expireSession(sessionId) {
    try {
      await pool.query(
        'UPDATE conversations SET is_active = false WHERE session_id = $1',
        [sessionId]
      );
      console.log(`‚è∞ Expired conversation session: ${sessionId}`);
    } catch (error) {
      console.error('Error expiring session:', error);
    }
  }

  // Clean up old conversations (run periodically)
  async cleanupOldConversations() {
    try {
      const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24 hours ago
      
      const result = await pool.query(
        'UPDATE conversations SET is_active = false WHERE last_activity < $1 AND is_active = true',
        [cutoffTime]
      );

      console.log(`üßπ Cleaned up ${result.rowCount} old conversations`);
      return result.rowCount;
    } catch (error) {
      console.error('Error cleaning up conversations:', error);
      return 0;
    }
  }

  // Get conversation analytics
  async getConversationStats(sessionId) {
    try {
      const session = await this.getOrCreateSession(sessionId);
      
      const stats = await pool.query(`
        SELECT 
          COUNT(*) as total_messages,
          COUNT(CASE WHEN message_type = 'question' THEN 1 END) as questions_count,
          COUNT(CASE WHEN message_type = 'answer' THEN 1 END) as answers_count,
          MIN(created_at) as first_message,
          MAX(created_at) as last_message
        FROM conversation_messages 
        WHERE conversation_id = $1
      `, [session.id]);

      return {
        sessionId,
        ...stats.rows[0],
        duration: session.last_activity - session.started_at
      };
    } catch (error) {
      console.error('Error getting conversation stats:', error);
      return null;
    }
  }
}

module.exports = ConversationService; 