const { GoogleGenerativeAI } = require('@google/generative-ai');
const { db } = require('../../../database');

class GeminiAiService {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
  }

  // Ph√°t hi·ªán tham chi·∫øu trong c√¢u h·ªèi d·ª±a tr√™n AI
  async detectReferences(question, history = [], context = {}) {
    try {
      console.log(`üß† Ph√¢n t√≠ch tham chi·∫øu th√¥ng minh cho c√¢u h·ªèi: "${question}"`);
      
      // N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠, kh√¥ng th·ªÉ c√≥ tham chi·∫øu
      if (!history || history.length <= 1) {
        console.log(`‚ö†Ô∏è Kh√¥ng c√≥ l·ªãch s·ª≠ h·ªôi tho·∫°i, kh√¥ng th·ªÉ c√≥ tham chi·∫øu`);
        return { 
          hasReference: false, 
          resolvedQuestion: question,
          confidence: 100
        };
      }

      // X√¢y d·ª±ng l·ªãch s·ª≠ h·ªôi tho·∫°i cho prompt
      let conversationHistory = '';
      // Ch·ªâ l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ ti·∫øt ki·ªám token
      const recentHistory = history.slice(-5);
      
      for (const msg of recentHistory) {
        const role = msg.message_type === 'question' ? 'Ng∆∞·ªùi d√πng' : 'Tr·ª£ l√Ω';
        conversationHistory += `${role}: ${msg.content}\n`;
        
        // N·∫øu l√† c√¢u tr·∫£ l·ªùi v√† c√≥ t√†i li·ªáu li√™n quan, th√™m th√¥ng tin
        if (msg.message_type === 'answer' && msg.relevant_documents && msg.relevant_documents.length > 0) {
          conversationHistory += `[T√†i li·ªáu ƒë·ªÅ c·∫≠p: ${msg.relevant_documents.map(doc => doc.name || 'Kh√¥ng c√≥ t√™n').join(', ')}]\n`;
        }
      }

      // T·∫°o prompt cho ph√¢n t√≠ch tham chi·∫øu
      const prompt = `B·∫°n l√† m·ªôt h·ªá th·ªëng ph√¢n t√≠ch ng·ªØ c·∫£nh h·ªôi tho·∫°i chuy√™n nghi·ªáp. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch xem c√¢u h·ªèi hi·ªán t·∫°i c√≥ ch·ª©a tham chi·∫øu ƒë·∫øn t√†i li·ªáu ho·∫∑c th√¥ng tin t·ª´ c√°c tin nh·∫Øn tr∆∞·ªõc ƒë√≥ kh√¥ng.

L·ªäCH S·ª¨ H·ªòI THO·∫†I G·∫¶N ƒê√ÇY:
${conversationHistory}

C√ÇU H·ªéI HI·ªÜN T·∫†I: "${question}"

H√£y ph√¢n t√≠ch:
1. C√¢u h·ªèi n√†y c√≥ ch·ª©a tham chi·∫øu ng·∫ßm ho·∫∑c r√µ r√†ng ƒë·∫øn t√†i li·ªáu ƒë√£ ƒë·ªÅ c·∫≠p tr∆∞·ªõc ƒë√≥ kh√¥ng?
2. N·∫øu c√≥, tham chi·∫øu ƒë√≥ l√† g√¨ v√† li√™n quan ƒë·∫øn t√†i li·ªáu n√†o?
3. N·∫øu c√≥ th·ªÉ, h√£y cung c·∫•p c√¢u h·ªèi ƒë√£ gi·∫£i quy·∫øt tham chi·∫øu (thay th·∫ø t·ª´ "n√†y", "ƒë√≥", "t√†i li·ªáu ƒë√≥" b·∫±ng t√™n t√†i li·ªáu c·ª• th·ªÉ)

QUAN TR·ªåNG:
- Tham chi·∫øu c√≥ th·ªÉ l√† t·ª´ nh∆∞ "t√†i li·ªáu ƒë√≥", "file n√†y", "quy ƒë·ªãnh ƒë√≥", "s∆° ƒë·ªì n√†y", ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† "n√≥"
- N·∫øu c√¢u h·ªèi ƒë·ªÅ c·∫≠p ƒë·∫øn ph√≤ng ban ho·∫∑c c√¥ng ty (VD: "Ban c√¥ng ngh·ªá th√¥ng tin c√≥ m·∫•y ng∆∞·ªùi"), ƒë√¢y KH√îNG ph·∫£i l√† tham chi·∫øu
- N·∫øu c√¢u h·ªèi c√≥ t·ª´ nh∆∞ "t√†i li·ªáu s·ªë 1", "file th·ª© hai", ƒë√≥ L√Ä tham chi·∫øu ƒë·∫øn th·ª© t·ª± t√†i li·ªáu trong c√¢u tr·∫£ l·ªùi tr∆∞·ªõc
- C√¢u h·ªèi ng·∫Øn nh∆∞ "chi ti·∫øt h∆°n" ho·∫∑c "n√≥i th√™m" th∆∞·ªùng l√† tham chi·∫øu ng·∫ßm ƒë·∫øn ch·ªß ƒë·ªÅ tr∆∞·ªõc ƒë√≥

Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON v·ªõi c·∫•u tr√∫c:
{
  "hasReference": boolean,
  "referenceType": "direct" | "indirect" | "none",
  "referencedDocument": "t√™n t√†i li·ªáu ho·∫∑c null",
  "resolvedQuestion": "c√¢u h·ªèi ƒë√£ gi·∫£i quy·∫øt tham chi·∫øu ho·∫∑c c√¢u h·ªèi g·ªëc",
  "confidence": 0-100,
  "explanation": "gi·∫£i th√≠ch ng·∫Øn g·ªçn v·ªÅ ph√¢n t√≠ch"
}

L∆ØU √ù: Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ n·ªôi dung kh√°c.`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      let analysisText = response.text();
      
      // ƒê·∫£m b·∫£o k·∫øt qu·∫£ l√† JSON
      try {
        // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i JSON n·∫øu c√≥
        if (analysisText.includes('```json')) {
          analysisText = analysisText.split('```json')[1].split('```')[0].trim();
        }
        const analysis = JSON.parse(analysisText);
        
        console.log(`‚úÖ Ph√¢n t√≠ch tham chi·∫øu ho√†n th√†nh: ${analysis.hasReference ? 'C√≥ tham chi·∫øu' : 'Kh√¥ng c√≥ tham chi·∫øu'}`);
        console.log(`   - Lo·∫°i tham chi·∫øu: ${analysis.referenceType}`);
        console.log(`   - ƒê·ªô tin c·∫≠y: ${analysis.confidence}%`);
        console.log(`   - Gi·∫£i th√≠ch: ${analysis.explanation}`);
        
        return {
          hasReference: analysis.hasReference,
          referenceType: analysis.referenceType,
          referencedDocument: analysis.referencedDocument,
          resolvedQuestion: analysis.resolvedQuestion || question,
          confidence: analysis.confidence,
          explanation: analysis.explanation
        };
      } catch (parseError) {
        console.error('L·ªói ph√¢n t√≠ch k·∫øt qu·∫£ JSON:', parseError);
        console.log('Ph·∫£n h·ªìi g·ªëc:', analysisText);
        
        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng th·ªÉ ph√¢n t√≠ch JSON
        return {
          hasReference: false,
          resolvedQuestion: question,
          confidence: 50,
          explanation: "Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ AI"
        };
      }
    } catch (error) {
      console.error('Error in detectReferences:', error);
      // Tr·∫£ v·ªÅ an to√†n n·∫øu c√≥ l·ªói
      return { 
        hasReference: false, 
        resolvedQuestion: question,
        confidence: 50,
        explanation: "L·ªói khi ph√¢n t√≠ch tham chi·∫øu"
      };
    }
  }

  // Handle general chatbot questions without documents
  async handleGeneralChatbotQuestion(question) {
    try {
      console.log(`ü§ñ Calling Gemini API for general question...`);
      
      const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch:

NGUY√äN T·∫ÆC:
1. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán
2. N·∫øu c√¢u h·ªèi v·ªÅ ki·∫øn th·ª©c chung, h√£y tr·∫£ l·ªùi v·ªõi th√¥ng tin ch√≠nh x√°c
3. N·∫øu kh√¥ng bi·∫øt, h√£y th·∫≥ng th·∫Øn n√≥i "T√¥i kh√¥ng bi·∫øt"
4. Lu√¥n t√≠ch c·ª±c v√† h·ªØu √≠ch
5. Kh√¥ng tr·∫£ l·ªùi v·ªÅ n·ªôi dung nh·∫°y c·∫£m

C√ÇUH·ªéI: ${question}

TR√ÅL·ªúI:`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const answer = response.text();
      console.log(`‚úÖ Gemini API response received`);
      return answer;
    } catch (error) {
      console.error('Error in handleGeneralChatbotQuestion:', error);
      console.error('Error details:', error.message);
      
      // Fallback response for common questions
      if (question.toLowerCase().includes('vi·ªát nam') && question.toLowerCase().includes('t·ªânh')) {
        return 'Vi·ªát Nam c√≥ 63 t·ªânh th√†nh ph·ªë, bao g·ªìm 58 t·ªânh v√† 5 th√†nh ph·ªë tr·ª±c thu·ªôc trung ∆∞∆°ng (H√† N·ªôi, TP.HCM, ƒê√† N·∫µng, H·∫£i Ph√≤ng, C·∫ßn Th∆°).';
      }
      
      return 'Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t v·ªõi API. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ƒë·∫∑t c√¢u h·ªèi kh√°c.';
    }
  }

  // Process questions with knowledge base entries (priority for policies)
  async processWithKnowledge(question, knowledgeEntries, startTime) {
    try {
      console.log(`üìö Processing with ${knowledgeEntries.length} knowledge entries`);
      
      // Generate context from knowledge entries
      const context = this.generateKnowledgeContext(knowledgeEntries);
      
      const prompt = `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng qu·∫£n l√Ω ki·∫øn th·ª©c doanh nghi·ªáp. H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin ƒë√£ h·ªçc ƒë∆∞·ª£c:

KI·∫æN TH·ª®C ƒê√É H·ªåC:
${context}

NGUY√äN T·∫ÆC:
1. ∆Øu ti√™n s·ª≠ d·ª•ng th√¥ng tin t·ª´ ki·∫øn th·ª©c ƒë√£ h·ªçc
2. Tr·∫£ l·ªùi ch√≠nh x√°c v√† chi ti·∫øt
3. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát t·ª± nhi√™n
4. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin ch√≠nh x√°c, h√£y n√≥i r√µ
5. ƒê∆∞a ra c√¢u tr·∫£ l·ªùi c√≥ c·∫•u tr√∫c v√† d·ªÖ hi·ªÉu

C√ÇUH·ªéI: ${question}

TR√ÅL·ªúI:`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const answer = response.text();
      const responseTime = Date.now() - startTime;
      
      console.log(`‚úÖ Knowledge-based answer generated: ${answer.substring(0, 100)}...`);
      
      // Save to database
      await db.createQuestion({
        question,
        answer,
        documentIds: [], // Knowledge entries don't have document IDs
        responseTime
      });
      
      return {
        answer,
        documentIds: [],
        relevantDocuments: knowledgeEntries.map(entry => ({
          id: entry.id,
          name: entry.question,
          type: 'knowledge',
          relevanceScore: entry.relevanceScore || 0
        })),
        responseTime
      };
    } catch (error) {
      console.error('Error processing with knowledge:', error);
      throw error;
    }
  }

  // Process questions with documents
  async processWithDocuments(question, relevantDocs, startTime) {
    try {
      // ∆Øu ti√™n mapping structured metadata
      let context = '';
      relevantDocs.forEach((doc, index) => {
        context += `\n[T√†i li·ªáu ${index + 1}: ${doc.dc_title || doc.original_name || "Kh√¥ng c√≥ t√™n"}]\n`;
        
        // Th√™m th√¥ng tin t·ª´ document_metadata
        if (doc.dc_description) {
          context += `M√¥ t·∫£: ${doc.dc_description}\n`;
        }
        
        if (doc.dc_subject && doc.dc_subject.length > 0) {
          context += `Ch·ªß ƒë·ªÅ: ${Array.isArray(doc.dc_subject) ? doc.dc_subject.join(', ') : doc.dc_subject}\n`;
        }
        
        if (doc.dc_type) {
          context += `Lo·∫°i t√†i li·ªáu: ${doc.dc_type}\n`;
        }
        
        if (doc.document_summary) {
          context += `T√≥m t·∫Øt: ${doc.document_summary}\n`;
        }
        
        if (doc.keywords && doc.keywords.length > 0) {
          context += `T·ª´ kh√≥a: ${Array.isArray(doc.keywords) ? doc.keywords.join(', ') : doc.keywords}\n`;
        }
        
        if (doc.categories && doc.categories.length > 0) {
          context += `Danh m·ª•c: ${Array.isArray(doc.categories) ? doc.categories.join(', ') : doc.categories}\n`;
        }
        
        if (doc.tags && doc.tags.length > 0) {
          context += `Tags: ${Array.isArray(doc.tags) ? doc.tags.join(', ') : doc.tags}\n`;
        }
        
        if (doc.entities) {
          context += `Entities: ${JSON.stringify(doc.entities)}\n`;
        }
        
        if (doc.key_values) {
          context += `Key-Value: ${JSON.stringify(doc.key_values)}\n`;
        }
        
        if (doc.document_sections) {
            context += `Sections:\n`;
          if (Array.isArray(doc.document_sections)) {
            doc.document_sections.forEach((section, i) => {
              context += `- ${section.title ? section.title + ': ' : ''}${section.content || ''}\n`;
            });
          } else {
            context += JSON.stringify(doc.document_sections) + '\n';
          }
        }
        
        if (doc.common_questions) {
          context += `C√¢u h·ªèi th∆∞·ªùng g·∫∑p:\n`;
          if (Array.isArray(doc.common_questions)) {
            doc.common_questions.forEach((qa, i) => {
              context += `- Q: ${qa.question}\n  A: ${qa.answer}\n`;
            });
          } else {
            context += JSON.stringify(doc.common_questions) + '\n';
          }
        }
        
        // Th√™m n·ªôi dung tr√≠ch xu·∫•t
        if (doc.extracted_text) {
          context += `N·ªôi dung:\n${doc.extracted_text.substring(0, 2000)}\n`;
        } else if (doc.content_text) {
          context += `N·ªôi dung:\n${doc.content_text.substring(0, 2000)}\n`;
        }
        
        // Th√™m key_information n·∫øu c√≥
        if (doc.key_information) {
          context += `Th√¥ng tin ch√≠nh: ${JSON.stringify(doc.key_information)}\n`;
        }
      });
      
      // Create enhanced prompt for process-oriented answers
      const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp v·ªÅ quy tr√¨nh v√† qu·∫£n l√Ω doanh nghi·ªáp, nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n c√°c t√†i li·ªáu c√¥ng ty ƒë∆∞·ª£c cung c·∫•p.

NGUY√äN T·∫ÆC QUAN TR·ªåNG:
1. CH·ªà tr·∫£ l·ªùi d·ª±a tr√™n th√¥ng tin c√≥ trong t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p
2. N·∫øu kh√¥ng c√≥ th√¥ng tin, h√£y n√≥i "Th√¥ng tin n√†y kh√¥ng c√≥ trong t√†i li·ªáu hi·ªán t·∫°i"
3. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng v√† chuy√™n nghi·ªáp
4. Tr√≠ch d·∫´n t√™n t√†i li·ªáu khi c√≥ th·ªÉ
5. N·∫øu c√≥ nhi·ªÅu th√¥ng tin li√™n quan, h√£y t·ªïng h·ª£p m·ªôt c√°ch logic

ƒê·∫∂C BI·ªÜT QUAN TR·ªåNG - KHI TR·∫¢ L·ªúI V·ªÄ QUY TR√åNH:
‚Ä¢ Li·ªát k√™ t·ª´ng B∆Ø·ªöC m·ªôt c√°ch r√µ r√†ng v√† c√≥ th·ª© t·ª±
‚Ä¢ Ch·ªâ r√µ AI DUY·ªÜT m·ªói b∆∞·ªõc (n·∫øu c√≥ trong t√†i li·ªáu)
‚Ä¢ Ch·ªâ r√µ TH·ªúI GIAN x·ª≠ l√Ω m·ªói b∆∞·ªõc (n·∫øu c√≥)
‚Ä¢ Ch·ªâ r√µ T√ÄI LI·ªÜU c·∫ßn thi·∫øt cho m·ªói b∆∞·ªõc
‚Ä¢ S·ª≠ d·ª•ng format:
  **B∆∞·ªõc 1:** [M√¥ t·∫£ b∆∞·ªõc]
  - Ng∆∞·ªùi duy·ªát: [T√™n/ch·ª©c v·ª•]
  - Th·ªùi gian: [Th·ªùi gian x·ª≠ l√Ω]
  - T√†i li·ªáu: [C√°c gi·∫•y t·ªù c·∫ßn thi·∫øt]

KHI TR·∫¢ L·ªúI V·ªÄ DANH S√ÅCH C√îNG TY/QUY ƒê·ªäNH:
‚Ä¢ Ph√¢n lo·∫°i theo H·∫†NG M·ª§C r√µ r√†ng
‚Ä¢ S·ª≠ d·ª•ng bullet points ho·∫∑c numbered list
‚Ä¢ Nh√≥m theo ch·ªß ƒë·ªÅ (VD: T√†i ch√≠nh, Nh√¢n s·ª±, Qu·∫£n l√Ω...)

NG·ªÆ C·∫¢NH T√ÄI LI·ªÜU:
${context}

C√ÇUH·ªéI: ${question}

TR√ÅL·ªúI:`;

      // Generate response using Gemini
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const answer = response.text();

      const responseTime = Date.now() - startTime;
      const documentIds = relevantDocs.map(doc => doc.id);

      // Save question and answer to database
      await db.createQuestion({
        question,
        answer,
        documentIds,
        responseTime
      });

      return {
        answer,
        documentIds,
        relevantDocuments: relevantDocs.map(doc => ({
          id: doc.id,
          name: doc.dc_title || doc.original_name || doc.name || "Kh√¥ng c√≥ t√™n",
          relevanceScore: doc.relevanceScore
        })),
        responseTime
      };

    } catch (error) {
      console.error('Error in processWithDocuments:', error);
      throw new Error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }

  // Generate context from relevant documents
  generateContext(documents) {
    let context = '';
    
    documents.forEach((doc, index) => {
      context += `\n[T√†i li·ªáu ${index + 1}: ${doc.original_name}]\n`;
      // Limit context length to avoid token limits
      const content = (doc.content_text || '').substring(0, 2000);
      context += content + '\n';
    });
    
    return context;
  }

  // Generate context from knowledge entries
  generateKnowledgeContext(knowledgeEntries) {
    let context = '';
    knowledgeEntries.forEach((entry, index) => {
      context += `\n[Ki·∫øn th·ª©c ${index + 1}: ${entry.question}]\n`;
      context += entry.answer + '\n';
    });
    return context;
  }

  // Summarize document content
  async summarizeDocument(documentId) {
    try {
      const document = await db.getDocumentById(documentId);
      
      if (!document || !document.content_text) {
        throw new Error('Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ho·∫∑c t√†i li·ªáu ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω');
      }

      const prompt = `
H√£y t√≥m t·∫Øt n·ªôi dung c·ªßa t√†i li·ªáu sau m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch:

T√äN T√ÄI LI·ªÜU: ${document.original_name}

N·ªòI DUNG:
${document.content_text.substring(0, 4000)}

Y√™u c·∫ßu:
- T√≥m t·∫Øt b·∫±ng ti·∫øng Vi·ªát
- N√™u r√µ c√°c ƒëi·ªÉm ch√≠nh
- ƒê·ªô d√†i kho·∫£ng 200-300 t·ª´
- S·ª≠ d·ª•ng bullet points n·∫øu c·∫ßn

T√ìM T·∫ÆT:`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      
      return {
        summary: response.text(),
        documentName: document.original_name,
        documentId: document.id
      };

    } catch (error) {
      console.error('Error in summarizeDocument:', error);
      throw error;
    }
  }

  // Extract key information from documents
  async extractKeyInfo(searchTerm) {
    try {
      const documents = await db.searchDocuments(searchTerm);
      
      if (documents.length === 0) {
        return {
          info: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin n√†o li√™n quan.',
          documents: []
        };
      }

      const context = this.generateContext(documents.slice(0, 3));
      
      const prompt = `
T·ª´ c√°c t√†i li·ªáu sau, h√£y tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng li√™n quan ƒë·∫øn "${searchTerm}":

${context}

Y√™u c·∫ßu:
- Tr√≠ch xu·∫•t th√¥ng tin ch√≠nh x√°c t·ª´ t√†i li·ªáu
- S·∫Øp x·∫øp theo m·ª©c ƒë·ªô quan tr·ªçng
- Ghi r√µ ngu·ªìn t√†i li·ªáu
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát

TH√îNG TIN TR√çCH XU·∫§T:`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      
      return {
        info: response.text(),
        documents: documents.map(doc => ({
          id: doc.id,
          name: doc.original_name,
          uploadDate: doc.upload_date
        }))
      };

    } catch (error) {
      console.error('Error in extractKeyInfo:', error);
      throw error;
    }
  }

  // Main method to ask questions
  async askQuestion(question, options = {}) {
    const startTime = Date.now();
    try {
      console.log(`üîç Processing question: "${question}"`);
      
      // Extract options
      const { 
        documents = [], 
        knowledgeEntries = [],
        companyInfo = null,
        departmentInfo = null,
        analysisResult = {}
      } = options;

      // Log data sources
      console.log(`üìä Data sources: ${documents.length} documents, ${knowledgeEntries.length} knowledge entries`);
      if (companyInfo) console.log(`üè¢ Company info: ${companyInfo.company_name || companyInfo.name}`);
      if (departmentInfo) console.log(`üè¢ Department info: ${departmentInfo.name}`);
      
      // Debug log documents
      if (documents.length > 0) {
        console.log(`üîç Document IDs: ${documents.map(doc => doc.id).join(', ')}`);
        console.log(`üîç Document titles: ${documents.map(doc => doc.dc_title || doc.original_name || "Kh√¥ng c√≥ t√™n").join(', ')}`);
      }
      
      // Check for document summarization request
      const isSummarizeRequest = question.toLowerCase().includes('t√≥m t·∫Øt') && 
                               (question.toLowerCase().includes('t√†i li·ªáu') || 
                                question.toLowerCase().includes('document'));
      
      if (isSummarizeRequest && documents.length > 0) {
        console.log(`üìë Handling document summarization request`);
        const doc = documents[0]; // Use the first document
        
        // T·∫°o t√≥m t·∫Øt t·ª´ metadata c·ªßa document
        let summary = `T√≥m t·∫Øt t√†i li·ªáu "${doc.dc_title || doc.original_name || "Kh√¥ng c√≥ t√™n"}":\n\n`;
        
        // Th√™m th√¥ng tin c∆° b·∫£n
        summary += `- Lo·∫°i t√†i li·ªáu: ${doc.dc_type || "Kh√¥ng x√°c ƒë·ªãnh"}\n`;
        if (doc.dc_date) summary += `- Ng√†y t·∫°o: ${new Date(doc.dc_date).toLocaleDateString('vi-VN')}\n`;
        if (doc.dc_creator && doc.dc_creator.length) summary += `- T√°c gi·∫£: ${Array.isArray(doc.dc_creator) ? doc.dc_creator.join(', ') : doc.dc_creator}\n`;
        if (doc.dc_publisher) summary += `- Nh√† xu·∫•t b·∫£n: ${doc.dc_publisher}\n`;
        if (doc.dc_description) summary += `- M√¥ t·∫£: ${doc.dc_description}\n`;
        if (doc.file_size) summary += `- K√≠ch th∆∞·ªõc: ${doc.file_size} bytes\n`;
        
        // Th√™m t·ª´ kh√≥a v√† ch·ªß ƒë·ªÅ
        if (doc.keywords && doc.keywords.length) {
          summary += `- T·ª´ kh√≥a: ${Array.isArray(doc.keywords) ? doc.keywords.join(', ') : doc.keywords}\n`;
        }
        if (doc.dc_subject && doc.dc_subject.length) {
          summary += `- Ch·ªß ƒë·ªÅ: ${Array.isArray(doc.dc_subject) ? doc.dc_subject.join(', ') : doc.dc_subject}\n`;
        }
        
        // Th√™m t√≥m t·∫Øt n·ªôi dung n·∫øu c√≥
        if (doc.document_summary) {
          summary += `\nT√≥m t·∫Øt n·ªôi dung:\n${doc.document_summary}\n`;
        }
        
        // N·∫øu kh√¥ng c√≥ t√≥m t·∫Øt s·∫µn, t·∫°o t√≥m t·∫Øt t·ª´ n·ªôi dung
        if (!doc.document_summary && (doc.extracted_text || doc.content_text)) {
          const content = doc.extracted_text || doc.content_text;
          const prompt = `
H√£y t√≥m t·∫Øt n·ªôi dung c·ªßa t√†i li·ªáu sau m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch:

T√äN T√ÄI LI·ªÜU: ${doc.dc_title || doc.original_name || "Kh√¥ng c√≥ t√™n"}

N·ªòI DUNG:
${content.substring(0, 4000)}

Y√™u c·∫ßu:
- T√≥m t·∫Øt b·∫±ng ti·∫øng Vi·ªát
- N√™u r√µ c√°c ƒëi·ªÉm ch√≠nh
- ƒê·ªô d√†i kho·∫£ng 200-300 t·ª´
- S·ª≠ d·ª•ng bullet points n·∫øu c·∫ßn

T√ìM T·∫ÆT:`;

          try {
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            summary += `\nT√≥m t·∫Øt n·ªôi dung:\n${response.text()}\n`;
          } catch (error) {
            console.error('Error generating summary:', error);
            summary += `\nKh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông.\n`;
          }
        }
        
        // Th√™m th√¥ng tin b·ªï sung n·∫øu c√≥
        if (doc.key_information) {
          summary += `\nTh√¥ng tin ch√≠nh:\n`;
          try {
            const keyInfo = typeof doc.key_information === 'string' ? 
                          JSON.parse(doc.key_information) : doc.key_information;
            
            Object.entries(keyInfo).forEach(([key, value]) => {
              if (typeof value !== 'object') {
                summary += `- ${key}: ${value}\n`;
              } else if (value !== null) {
                summary += `- ${key}: ${JSON.stringify(value)}\n`;
              }
            });
          } catch (error) {
            console.error('Error processing key_information:', error);
            summary += `- ${doc.key_information}\n`;
          }
        }
        
        console.log(`‚úÖ Generated summary for document: ${doc.id}`);
        
        return {
          answer: summary,
          documentIds: [doc.id],
          relevantDocuments: [doc],
          responseTime: Date.now() - startTime
        };
      }
      
      // Process with documents if available (priority)
      if (documents.length > 0) {
        console.log(`üìÑ Processing with ${documents.length} documents`);
        return await this.processWithDocuments(question, documents, startTime);
      }
      
      // Process with knowledge base entries if available
      if (knowledgeEntries.length > 0) {
        console.log(`üìö Processing with ${knowledgeEntries.length} knowledge entries`);
        return await this.processWithKnowledge(question, knowledgeEntries, startTime);
      }
      
      // Fallback to general chatbot
      console.log(`üí¨ No specific data sources, using general chatbot`);
      const answer = await this.handleGeneralChatbotQuestion(question);
      
      return {
        answer,
        documentIds: [],
        relevantDocuments: [],
        responseTime: Date.now() - startTime
      };
      
    } catch (error) {
      console.error('Error in askQuestion:', error);
      return {
        answer: 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y do l·ªói k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.',
        documentIds: [],
        relevantDocuments: [],
        responseTime: Date.now() - startTime,
        error: error.message
      };
    }
  }
}

module.exports = GeminiAiService; 