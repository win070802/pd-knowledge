const { db } = require('../../../database');

class DataIntegrationService {
  constructor() {
    this.dataCache = new Map();
    this.cacheTTL = 30 * 60 * 1000; // 30 ph√∫t
    this.sensitiveRules = []; // L∆∞u tr·ªØ c√°c quy t·∫Øc nh·∫°y c·∫£m t·ª´ database
    this.loadSensitiveRules(); // T·∫£i c√°c quy t·∫Øc nh·∫°y c·∫£m khi kh·ªüi t·∫°o
  }

  /**
   * T·∫£i c√°c quy t·∫Øc nh·∫°y c·∫£m t·ª´ database
   */
  async loadSensitiveRules() {
    try {
      this.sensitiveRules = await db.getSensitiveRules(true);
      console.log(`‚úÖ Loaded ${this.sensitiveRules.length} sensitive rules from database`);
    } catch (error) {
      console.error('Error loading sensitive rules:', error);
      this.sensitiveRules = [];
    }
  }

  /**
   * Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a n·ªôi dung nh·∫°y c·∫£m
   * @param {string} question - C√¢u h·ªèi c·∫ßn ki·ªÉm tra
   * @returns {boolean} K·∫øt qu·∫£ ki·ªÉm tra
   */
  async checkSensitiveContent(question) {
    try {
      // ƒê·∫£m b·∫£o ƒë√£ t·∫£i quy t·∫Øc nh·∫°y c·∫£m
      if (this.sensitiveRules.length === 0) {
        await this.loadSensitiveRules();
      }
      
      // Ki·ªÉm tra t·ª´ng quy t·∫Øc
      for (const rule of this.sensitiveRules) {
        try {
          const pattern = new RegExp(rule.pattern, 'i');
          if (pattern.test(question.trim())) {
            console.log(`üö´ Sensitive content detected by rule: ${rule.rule_name}`);
            return true;
          }
        } catch (error) {
          console.error(`Error in regex pattern for rule ${rule.rule_name}:`, error);
        }
      }
      
      // Ki·ªÉm tra c√°c t·ª´ kh√≥a nh·∫°y c·∫£m ngo√†i ph·∫°m vi c√¥ng vi·ªác
      const nonWorkTopics = [
        /ch√≠nh tr·ªã|ƒë·∫£ng|b·∫ßu c·ª≠|ch√≠nh ph·ªß|politics|government|election/i,
        /t√¥n gi√°o|ƒë·∫°o|t√≠n ng∆∞·ª°ng|religion|faith|god/i,
        /th·ªÉ thao|b√≥ng ƒë√°|b√≥ng r·ªï|sports|football|soccer|basketball/i,
        /gi·∫£i tr√≠|phim|ca sƒ©|di·ªÖn vi√™n|entertainment|movie|singer|actor/i,
        /tr√≤ ch∆°i|game|gaming|esport/i
      ];
      
      for (const pattern of nonWorkTopics) {
        if (pattern.test(question.trim())) {
          console.log(`üö´ Non-work related topic detected`);
          return true;
        }
      }
      
      return false;
    } catch (error) {
      console.error('Error checking sensitive content:', error);
      return false;
    }
  }

  /**
   * H·ª£p nh·∫•t d·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Object} D·ªØ li·ªáu ƒë√£ h·ª£p nh·∫•t
   */
  async integrateData(question, analysis) {
    try {
      console.log(`üîÑ Integrating data for question: "${question}"`);
      
      // Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a n·ªôi dung nh·∫°y c·∫£m
      const isSensitive = await this.checkSensitiveContent(question);
      if (isSensitive) {
        return {
          documents: [],
          knowledgeEntries: [],
          companyInfo: null,
          departmentInfo: null,
          constraint: {
            answer: "C√¢u h·ªèi c·ªßa b·∫°n c√≥ th·ªÉ ch·ª©a n·ªôi dung nh·∫°y c·∫£m ho·∫∑c n·∫±m ngo√†i ph·∫°m vi c√¥ng vi·ªác. T√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i li·ªáu v√† ho·∫°t ƒë·ªông c·ªßa c√¥ng ty. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi kh√°c.",
            confidence: 100
          },
          metadata: {
            sources: ['constraints'],
            isSensitive: true
          }
        };
      }
      
      // Ki·ªÉm tra n·∫øu c√¢u h·ªèi n·∫±m ngo√†i ph·∫°m vi c√¥ng vi·ªác
      if (analysis.intent === 'general_question' && analysis.topic === 'general_knowledge') {
        return {
          documents: [],
          knowledgeEntries: [],
          companyInfo: null,
          departmentInfo: null,
          constraint: {
            answer: "T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ t√†i li·ªáu c·ªßa c√¥ng ty. C√¢u h·ªèi c·ªßa b·∫°n n·∫±m ngo√†i ph·∫°m vi d·ªØ li·ªáu c·ªßa t√¥i. T√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ t√†i li·ªáu, quy ƒë·ªãnh, quy tr√¨nh c·ªßa c√¥ng ty. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i li·ªáu ho·∫∑c th√¥ng tin c√¥ng ty ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n.",
            confidence: 95
          },
          metadata: {
            sources: ['constraints'],
            isOutOfScope: true
          }
        };
      }
      
      // X√°c ƒë·ªãnh c√°c ngu·ªìn d·ªØ li·ªáu c·∫ßn truy v·∫•n
      const dataSources = this.determineDataSources(analysis);
      
      // Truy v·∫•n d·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn song song
      const dataPromises = dataSources.map(source => this.fetchDataFromSource(source, question, analysis));
      const dataResults = await Promise.all(dataPromises);
      
      // H·ª£p nh·∫•t k·∫øt qu·∫£
      const integratedData = this.mergeResults(dataResults, analysis);
      
      return integratedData;
    } catch (error) {
      console.error('Error integrating data:', error);
      return {
        documents: [],
        knowledgeEntries: [],
        companyInfo: null,
        departmentInfo: null,
        metadata: {}
      };
    }
  }

  /**
   * X√°c ƒë·ªãnh c√°c ngu·ªìn d·ªØ li·ªáu c·∫ßn truy v·∫•n
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Array<string>} Danh s√°ch c√°c ngu·ªìn d·ªØ li·ªáu
   */
  determineDataSources(analysis) {
    const sources = [];
    
    switch (analysis.source) {
      case 'documents':
        sources.push('documents');
        break;
        
      case 'knowledge':
        sources.push('knowledge_base');
        break;
        
      case 'hybrid':
        sources.push('documents', 'knowledge_base');
        break;
        
      case 'constraints':
        sources.push('constraints');
        break;
        
      default:
        sources.push('constraints');
    }
    
    // Th√™m ngu·ªìn d·ªØ li·ªáu v·ªÅ c√¥ng ty n·∫øu c√≥
    if (analysis.company) {
      sources.push('companies');
    }
    
    // Th√™m ngu·ªìn d·ªØ li·ªáu v·ªÅ ph√≤ng ban n·∫øu c√≥
    if (analysis.department) {
      sources.push('departments');
    }
    
    return sources;
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ m·ªôt ngu·ªìn c·ª• th·ªÉ
   * @param {string} source - Ngu·ªìn d·ªØ li·ªáu
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Object} D·ªØ li·ªáu t·ª´ ngu·ªìn
   */
  async fetchDataFromSource(source, question, analysis) {
    try {
      const cacheKey = `${source}:${question}`;
      
      // Ki·ªÉm tra cache
      if (this.dataCache.has(cacheKey)) {
        const cachedData = this.dataCache.get(cacheKey);
        if (Date.now() - cachedData.timestamp < this.cacheTTL) {
          console.log(`üîç Using cached data for ${source}`);
          return { source, data: cachedData.data };
        }
      }
      
      console.log(`üîç Fetching data from ${source}`);
      
      let data = null;
      
      switch (source) {
        case 'documents':
          data = await this.fetchDocuments(question, analysis);
          break;
          
        case 'knowledge_base':
          data = await this.fetchKnowledgeBase(question, analysis);
          break;
          
        case 'companies':
          data = await this.fetchCompanyInfo(analysis.company);
          break;
          
        case 'departments':
          data = await this.fetchDepartmentInfo(analysis.department, analysis.company);
          break;
          
        case 'constraints':
          data = await this.fetchConstraints(question);
          break;
          
        default:
          data = null;
      }
      
      // L∆∞u v√†o cache
      this.dataCache.set(cacheKey, {
        data,
        timestamp: Date.now()
      });
      
      return { source, data };
    } catch (error) {
      console.error(`Error fetching data from ${source}:`, error);
      return { source, data: null, error: error.message };
    }
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ document_metadata
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Array} Danh s√°ch t√†i li·ªáu li√™n quan
   */
  async fetchDocuments(question, analysis) {
    try {
      // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√¢u h·ªèi danh s√°ch t√†i li·ªáu theo c√¥ng ty
      if (analysis.intent === 'list_documents') {
        console.log(`üìë Fetching document list for intent: list_documents`);
        const { pool } = require('../../config/database');
        const client = await pool.connect();
        
        try {
          // Ki·ªÉm tra n·∫øu c√¢u h·ªèi y√™u c·∫ßu t·∫•t c·∫£ t√†i li·ªáu c·ªßa t·∫≠p ƒëo√†n
          const isAllCompaniesRequest = 
            question.toLowerCase().includes('t·∫•t c·∫£') || 
            question.toLowerCase().includes('to√†n b·ªô') ||
            question.toLowerCase().includes('t·∫≠p ƒëo√†n') ||
            question.toLowerCase().includes('m·ªçi c√¥ng ty') ||
            question.toLowerCase().includes('c√°c c√¥ng ty');
            
          // N·∫øu l√† y√™u c·∫ßu t·∫•t c·∫£ t√†i li·ªáu c·ªßa t·∫≠p ƒëo√†n
          if (isAllCompaniesRequest) {
            console.log(`üìë Fetching documents for all companies`);
            
            // L·∫•y t·∫•t c·∫£ t√†i li·ªáu v√† th√¥ng tin c√¥ng ty
            const result = await client.query(`
              SELECT d.*, c.company_code as company_code, c.company_name as company_name 
              FROM document_metadata d 
              JOIN companies c ON d.company_id = c.id 
              ORDER BY c.company_name, d.date_created DESC
            `);
            
            return result.rows;
          }
          // N·∫øu c√≥ c√¥ng ty c·ª• th·ªÉ
          else if (analysis.company) {
            console.log(`üìë Fetching document list for company: ${analysis.company}`);
            
            // Tr∆∞·ªõc ti√™n l·∫•y th√¥ng tin c√¥ng ty
            const companyResult = await client.query(`
              SELECT * FROM companies 
              WHERE UPPER(company_code) = UPPER($1)
            `, [analysis.company]);
            
            if (companyResult.rows.length === 0) {
              console.log(`‚ö†Ô∏è Company with code "${analysis.company}" not found`);
              return [];
            }
            
            const company = companyResult.rows[0];
            
            // Sau ƒë√≥ l·∫•y t√†i li·ªáu c·ªßa c√¥ng ty ƒë√≥
            const result = await client.query(`
              SELECT d.*, c.company_code as company_code, c.company_name as company_name 
              FROM document_metadata d 
              JOIN companies c ON d.company_id = c.id 
              WHERE c.id = $1 
              ORDER BY d.date_created DESC
            `, [company.id]);
            
            return result.rows;
          }
          // N·∫øu kh√¥ng c√≥ c√¥ng ty c·ª• th·ªÉ v√† kh√¥ng ph·∫£i y√™u c·∫ßu t·∫•t c·∫£
          else {
            // Th·ª≠ t√¨m c√¥ng ty t·ª´ ng·ªØ c·∫£nh c√¢u h·ªèi
            const questionLower = question.toLowerCase();
            const companyResult = await client.query(`SELECT * FROM companies`);
            let detectedCompany = null;
            
            // T√¨m c√¥ng ty t·ª´ c√¢u h·ªèi
            for (const company of companyResult.rows) {
              if (company.company_name && questionLower.includes(company.company_name.toLowerCase())) {
                detectedCompany = company;
                break;
              }
              
              if (company.company_code && questionLower.includes(company.company_code.toLowerCase())) {
                detectedCompany = company;
                break;
              }
            }
            
            // N·∫øu t√¨m th·∫•y c√¥ng ty
            if (detectedCompany) {
              console.log(`üìë Detected company from question: ${detectedCompany.company_code}`);
              
              const result = await client.query(`
                SELECT d.*, c.company_code as company_code, c.company_name as company_name 
                FROM document_metadata d 
                JOIN companies c ON d.company_id = c.id 
                WHERE c.id = $1 
                ORDER BY d.date_created DESC
              `, [detectedCompany.id]);
              
              return result.rows;
            }
            // M·∫∑c ƒë·ªãnh l·∫•y t·∫•t c·∫£ t√†i li·ªáu
            else {
              console.log(`üìë No specific company detected, fetching all documents`);
              
              const result = await client.query(`
                SELECT d.*, c.company_code as company_code, c.company_name as company_name 
                FROM document_metadata d 
                JOIN companies c ON d.company_id = c.id 
                ORDER BY d.date_created DESC
                LIMIT 20
              `);
              
              return result.rows;
            }
          }
        } finally {
          client.release();
        }
      }
      
      // T√¨m ki·∫øm t√†i li·ªáu v·ªõi c√°c b·ªô l·ªçc
      const filters = {};
      
      // L·ªçc theo c√¥ng ty
      if (analysis.company) {
        // L·∫•y ID c√¥ng ty t·ª´ m√£ c√¥ng ty
        const { pool } = require('../../config/database');
        const companyClient = await pool.connect();
        try {
          const companyResult = await companyClient.query(`
            SELECT id FROM companies 
            WHERE UPPER(company_code) = UPPER($1)
          `, [analysis.company]);
          
          if (companyResult.rows.length > 0) {
            filters.company_id = companyResult.rows[0].id;
          }
        } finally {
          companyClient.release();
        }
      }
      
      // L·ªçc theo ph√≤ng ban (n·∫øu c√≥)
      if (analysis.department) {
        filters.department = analysis.department;
      }
      
      // L·ªçc theo ch·ªß ƒë·ªÅ (n·∫øu c√≥)
      if (analysis.topic) {
        filters.dc_type = analysis.topic;
      }
      
      // Th·ª±c hi·ªán t√¨m ki·∫øm trong document_metadata
      const { pool } = require('../../config/database');
      const client = await pool.connect();
      try {
        // Chu·∫©n b·ªã t·ª´ kh√≥a t√¨m ki·∫øm
        const searchPattern = `%${question.toLowerCase().replace(/\s+/g, '%')}%`;
        
        // X√¢y d·ª±ng c√¢u truy v·∫•n ƒë·ªông v·ªõi c√°c b·ªô l·ªçc
        let query = `
          SELECT * FROM document_metadata 
          WHERE (LOWER(dc_title) LIKE $1 OR 
                LOWER(dc_description) LIKE $1 OR
                LOWER(document_summary) LIKE $1 OR
                extracted_text LIKE $1)
        `;
        
        const queryParams = [searchPattern];
        let paramIndex = 2;
        
        // Th√™m c√°c ƒëi·ªÅu ki·ªán l·ªçc
        if (filters.company_id) {
          query += ` AND company_id = $${paramIndex}`;
          queryParams.push(filters.company_id);
          paramIndex++;
        }
        
        if (filters.department) {
          query += ` AND department = $${paramIndex}`;
          queryParams.push(filters.department);
          paramIndex++;
        }
        
        if (filters.dc_type) {
          query += ` AND dc_type = $${paramIndex}`;
          queryParams.push(filters.dc_type);
          paramIndex++;
        }
        
        // Th√™m s·∫Øp x·∫øp v√† gi·ªõi h·∫°n
        query += ` ORDER BY date_created DESC LIMIT 5`;
        
        const result = await client.query(query, queryParams);
        return result.rows;
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('Error fetching documents:', error);
      return [];
    }
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ knowledge base
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Array} Danh s√°ch knowledge entries li√™n quan
   */
  async fetchKnowledgeBase(question, analysis) {
    try {
      const { pool } = require('../../config/database');
      const client = await pool.connect();
      
      try {
        console.log(`üîç Searching knowledge_base for: "${question}"`);
        
        // Chu·∫©n b·ªã pattern t√¨m ki·∫øm
        const searchWords = question.toLowerCase()
          .split(/\s+/)
          .filter(word => word.length > 3)
          .map(word => `%${word}%`);
        
        if (searchWords.length === 0) {
          searchWords.push(`%${question.toLowerCase()}%`);
        }
        
        // T·∫°o query v·ªõi nhi·ªÅu ƒëi·ªÅu ki·ªán OR
        let query = `
          SELECT kb.*, c.company_code 
          FROM knowledge_base kb
          LEFT JOIN companies c ON kb.company_id = c.id
          WHERE kb.is_active = true AND (
        `;
        
        const conditions = [];
        const params = [];
        let paramIndex = 1;
        
        // T·∫°o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm cho m·ªói t·ª´
        for (const word of searchWords) {
          conditions.push(`LOWER(kb.question) LIKE $${paramIndex} OR LOWER(kb.answer) LIKE $${paramIndex}`);
          params.push(word);
          paramIndex++;
        }
        
        query += conditions.join(' OR ') + ')';
        
        // Th√™m ƒëi·ªÅu ki·ªán l·ªçc theo c√¥ng ty n·∫øu c√≥
        if (analysis.company) {
          query += ` AND (c.company_code = $${paramIndex} OR kb.company_id IS NULL)`;
          params.push(analysis.company);
          paramIndex++;
        }
        
        // Gi·ªõi h·∫°n k·∫øt qu·∫£ v√† s·∫Øp x·∫øp
        query += ` ORDER BY 
          CASE WHEN kb.company_id IS NOT NULL THEN 0 ELSE 1 END, 
          kb.created_at DESC 
          LIMIT 10`;
        
        console.log(`üìù Executing query: ${query}`);
        console.log(`üìù With params: ${params.join(', ')}`);
        
        const result = await client.query(query, params);
        console.log(`üìö Found ${result.rows.length} knowledge entries`);
        
        return result.rows;
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('Error fetching knowledge base:', error);
      return [];
    }
  }

  /**
   * Truy v·∫•n th√¥ng tin c√¥ng ty
   * @param {string} companyCode - M√£ c√¥ng ty
   * @returns {Object} Th√¥ng tin c√¥ng ty
   */
  async fetchCompanyInfo(companyCode) {
    try {
      if (!companyCode) return null;
      
      const { pool } = require('../../config/database');
      const client = await pool.connect();
      
      try {
        console.log(`üîç Fetching company info for code: "${companyCode}"`);
        
        const query = `
          SELECT * FROM companies 
          WHERE UPPER(company_code) = UPPER($1)
        `;
        
        const result = await client.query(query, [companyCode]);
        
        if (result.rows.length > 0) {
          console.log(`‚úÖ Found company: ${result.rows[0].company_name}`);
          return result.rows[0];
        } else {
          console.log(`‚ö†Ô∏è Company with code "${companyCode}" not found`);
          return null;
        }
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('Error fetching company info:', error);
      return null;
    }
  }

  /**
   * Truy v·∫•n th√¥ng tin ph√≤ng ban
   * @param {string} department - T√™n ph√≤ng ban
   * @param {string} companyCode - M√£ c√¥ng ty
   * @returns {Object} Th√¥ng tin ph√≤ng ban
   */
  async fetchDepartmentInfo(department, companyCode) {
    try {
      if (!department) return null;
      
      const { pool } = require('../../config/database');
      const client = await pool.connect();
      
      try {
        console.log(`üîç Fetching department info for: "${department}" in company "${companyCode || 'any'}"`);
        
        let query = '';
        let params = [];
        
        if (companyCode) {
          // T√¨m ph√≤ng ban trong c√¥ng ty c·ª• th·ªÉ
          query = `
            SELECT c.id as company_id, c.company_code, c.company_name, 
                   c.departments->>$1 as department_info
            FROM companies c
            WHERE UPPER(c.company_code) = UPPER($2)
            AND c.departments ? $1
          `;
          params = [department, companyCode];
        } else {
          // T√¨m ph√≤ng ban trong t·∫•t c·∫£ c√°c c√¥ng ty
          query = `
            SELECT c.id as company_id, c.company_code, c.company_name, 
                   c.departments->>$1 as department_info
            FROM companies c
            WHERE c.departments ? $1
            LIMIT 1
          `;
          params = [department];
        }
        
        const result = await client.query(query, params);
        
        if (result.rows.length > 0) {
          const row = result.rows[0];
          let departmentInfo = null;
          
          try {
            departmentInfo = JSON.parse(row.department_info);
          } catch (e) {
            departmentInfo = { name: row.department_info };
          }
          
          const info = {
            name: departmentInfo.name || department,
            code: departmentInfo.code || department,
            head: departmentInfo.head,
            company: {
              id: row.company_id,
              code: row.company_code,
              name: row.company_name
            }
          };
          
          console.log(`‚úÖ Found department: ${info.name} in ${info.company.name}`);
          return info;
        } else {
          console.log(`‚ö†Ô∏è Department "${department}" not found`);
          return null;
        }
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('Error fetching department info:', error);
      return null;
    }
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ constraints
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @returns {Object} Th√¥ng tin constraints
   */
  async fetchConstraints(question) {
    try {
      const { pool } = require('../../config/database');
      const client = await pool.connect();
      
      try {
        console.log(`üîç Checking constraints for question: "${question}"`);
        
      // L·∫•y t·∫•t c·∫£ constraints
        const query = `
          SELECT * FROM constraints 
          WHERE is_active = true
        `;
        
        const result = await client.query(query);
        const constraints = result.rows;
      
      // T√¨m constraint ph√π h·ª£p
      for (const constraint of constraints) {
        if (this.matchConstraint(question, constraint.question)) {
            console.log(`‚úÖ Found matching constraint: "${constraint.question}"`);
          return constraint;
        }
      }
      
        console.log('‚ö†Ô∏è No matching constraint found');
      return null;
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('Error fetching constraints:', error);
      return null;
    }
  }

  /**
   * Ki·ªÉm tra xem c√¢u h·ªèi c√≥ kh·ªõp v·ªõi constraint kh√¥ng
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {string} constraintQuestion - C√¢u h·ªèi trong constraint
   * @returns {boolean} K·∫øt qu·∫£ so kh·ªõp
   */
  matchConstraint(question, constraintQuestion) {
    const questionLower = question.toLowerCase().trim();
    const constraintLower = constraintQuestion.toLowerCase().trim();
    
    // Ki·ªÉm tra kh·ªõp ch√≠nh x√°c
    if (questionLower === constraintLower) {
      return true;
    }
    
    // Ki·ªÉm tra kh·ªõp m·ªù
    const questionWords = questionLower.split(/\s+/);
    const constraintWords = constraintLower.split(/\s+/);
    
    let matchCount = 0;
    for (const word of questionWords) {
      if (word.length > 2 && constraintWords.includes(word)) {
        matchCount++;
      }
    }
    
    // N·∫øu ƒë·ªß s·ªë t·ª´ kh·ªõp, coi l√† match
    return matchCount >= Math.min(2, questionWords.length - 1);
  }

  /**
   * H·ª£p nh·∫•t k·∫øt qu·∫£ t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu
   * @param {Array} dataResults - K·∫øt qu·∫£ t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Object} D·ªØ li·ªáu ƒë√£ h·ª£p nh·∫•t
   */
  mergeResults(dataResults, analysis) {
    const result = {
      documents: [],
      knowledgeEntries: [],
      companyInfo: null,
      departmentInfo: null,
      constraint: null,
      metadata: {
        sources: [],
        analysisResult: analysis
      }
    };
    
    // H·ª£p nh·∫•t d·ªØ li·ªáu t·ª´ c√°c ngu·ªìn
    for (const { source, data, error } of dataResults) {
      if (error) {
        result.metadata.errors = result.metadata.errors || {};
        result.metadata.errors[source] = error;
        continue;
      }
      
      if (!data) continue;
      
      result.metadata.sources.push(source);
      
      switch (source) {
        case 'documents':
          result.documents = data;
          break;
          
        case 'knowledge_base':
          result.knowledgeEntries = data;
          break;
          
        case 'companies':
          result.companyInfo = data;
          break;
          
        case 'departments':
          result.departmentInfo = data;
          break;
          
        case 'constraints':
          result.constraint = data;
          break;
      }
    }
    
    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√¢u h·ªèi danh s√°ch t√†i li·ªáu theo c√¥ng ty
    if (analysis.intent === 'list_documents' && result.documents.length >= 0) {
      // Ki·ªÉm tra xem l√† y√™u c·∫ßu t·∫•t c·∫£ t√†i li·ªáu hay ch·ªâ c·ªßa m·ªôt c√¥ng ty
      const isAllCompaniesRequest = 
        analysis.company === null && 
        (result.documents.length > 0 && result.documents.some(doc => doc.company_code !== result.documents[0].company_code));
      
      if (isAllCompaniesRequest) {
        // Nh√≥m t√†i li·ªáu theo c√¥ng ty
        const documentsByCompany = {};
        
        for (const doc of result.documents) {
          const companyCode = doc.company_code || 'unknown';
          const companyName = doc.company_name || 'Kh√¥ng x√°c ƒë·ªãnh';
          
          if (!documentsByCompany[companyCode]) {
            documentsByCompany[companyCode] = {
              name: companyName,
              documents: []
            };
          }
          
          documentsByCompany[companyCode].documents.push(doc);
        }
        
        // T·∫°o danh s√°ch t√†i li·ªáu theo c√¥ng ty
        if (Object.keys(documentsByCompany).length > 0) {
          let documentList = '';
          
          for (const [companyCode, company] of Object.entries(documentsByCompany)) {
            documentList += `\n\n## ${company.name} (${companyCode})\n`;
            
            if (company.documents.length > 0) {
              company.documents.forEach((doc, index) => {
                documentList += `${index + 1}. ${doc.dc_title || doc.original_name || 'T√†i li·ªáu kh√¥ng t√™n'} (${doc.dc_type || doc.category || 'Ch∆∞a ph√¢n lo·∫°i'})\n`;
              });
            } else {
              documentList += `Kh√¥ng c√≥ t√†i li·ªáu\n`;
            }
          }
          
          result.constraint = {
            answer: `Danh s√°ch t√†i li·ªáu c·ªßa t·∫•t c·∫£ c√¥ng ty trong t·∫≠p ƒëo√†n:${documentList}`,
            confidence: 100
          };
        } else {
          result.constraint = {
            answer: `Hi·ªán t·∫°i ch∆∞a c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c upload cho c√°c c√¥ng ty trong t·∫≠p ƒëo√†n. Vui l√≤ng upload t√†i li·ªáu ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.`,
            confidence: 100
          };
        }
      } else {
        // L·∫•y t√™n c√¥ng ty t·ª´ th√¥ng tin c√¥ng ty ho·∫∑c t·ª´ t√†i li·ªáu
        let companyName = "kh√¥ng x√°c ƒë·ªãnh";
        
        if (result.companyInfo) {
          companyName = result.companyInfo.company_name;
        } else if (result.documents.length > 0 && result.documents[0].company_name) {
          companyName = result.documents[0].company_name;
        } else if (analysis.company) {
          companyName = analysis.company;
        }
        
        if (result.documents.length > 0) {
          const documentList = result.documents.map((doc, index) => 
            `${index + 1}. ${doc.dc_title || doc.original_name || 'T√†i li·ªáu kh√¥ng t√™n'} (${doc.dc_type || doc.category || 'Ch∆∞a ph√¢n lo·∫°i'})`
          ).join('\n');
          
          result.constraint = {
            answer: `Danh s√°ch t√†i li·ªáu thu·ªôc ${companyName}:\n\n${documentList}`,
            confidence: 100
          };
        } else {
          result.constraint = {
            answer: `Hi·ªán t·∫°i ch∆∞a c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c upload cho ${companyName}. Vui l√≤ng upload t√†i li·ªáu ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.`,
            confidence: 100
          };
        }
      }
    }
    
    return result;
  }

  /**
   * X√≥a cache
   */
  clearCache() {
    this.dataCache.clear();
    console.log('üßπ Data cache cleared');
  }
}

module.exports = DataIntegrationService; 