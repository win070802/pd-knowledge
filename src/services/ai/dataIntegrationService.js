const { db } = require('../../../database');

class DataIntegrationService {
  constructor() {
    this.dataCache = new Map();
    this.cacheTTL = 30 * 60 * 1000; // 30 ph√∫t
    this.sensitiveRules = []; // L∆∞u tr·ªØ c√°c quy t·∫Øc nh·∫°y c·∫£m t·ª´ database
    this.loadSensitiveRules(); // T·∫£i c√°c quy t·∫Øc nh·∫°y c·∫£m khi kh·ªüi t·∫°o
  }

  /**
   * T·∫£i c√°c quy t·∫Øc nh·∫°y c·∫£m t·ª´ database
   */
  async loadSensitiveRules() {
    try {
      this.sensitiveRules = await db.getSensitiveRules(true);
      console.log(`‚úÖ Loaded ${this.sensitiveRules.length} sensitive rules from database`);
    } catch (error) {
      console.error('Error loading sensitive rules:', error);
      // N·∫øu l·ªói li√™n quan ƒë·∫øn c·ªôt kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng m·∫£ng r·ªóng
      this.sensitiveRules = [];
      
      // Th·ª≠ t·∫£i t·∫•t c·∫£ c√°c quy t·∫Øc m√† kh√¥ng l·ªçc theo tr·∫°ng th√°i active
      try {
        const client = require('../../config/database').pool.connect();
        const result = await (await client).query('SELECT * FROM sensitive_rules');
        this.sensitiveRules = result.rows;
        console.log(`‚úÖ Loaded ${this.sensitiveRules.length} sensitive rules directly from database`);
        (await client).release();
      } catch (dbError) {
        console.error('Error loading sensitive rules directly:', dbError);
      }
    }
  }

  /**
   * Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a n·ªôi dung nh·∫°y c·∫£m
   * @param {string} question - C√¢u h·ªèi c·∫ßn ki·ªÉm tra
   * @returns {boolean} K·∫øt qu·∫£ ki·ªÉm tra
   */
  async checkSensitiveContent(question) {
    try {
      // ƒê·∫£m b·∫£o ƒë√£ t·∫£i quy t·∫Øc nh·∫°y c·∫£m
      if (this.sensitiveRules.length === 0) {
        await this.loadSensitiveRules();
      }
      
      // Ki·ªÉm tra t·ª´ng quy t·∫Øc
      for (const rule of this.sensitiveRules) {
        try {
          const pattern = new RegExp(rule.pattern, 'i');
          if (pattern.test(question.trim())) {
            console.log(`üö´ Sensitive content detected by rule: ${rule.rule_name}`);
            return true;
          }
        } catch (error) {
          console.error(`Error in regex pattern for rule ${rule.rule_name}:`, error);
        }
      }
      
      // Ki·ªÉm tra c√°c t·ª´ kh√≥a nh·∫°y c·∫£m ngo√†i ph·∫°m vi c√¥ng vi·ªác
      const nonWorkTopics = [
        /ch√≠nh tr·ªã|ƒë·∫£ng|b·∫ßu c·ª≠|ch√≠nh ph·ªß|politics|government|election/i,
        /t√¥n gi√°o|ƒë·∫°o|t√≠n ng∆∞·ª°ng|religion|faith|god/i,
        /th·ªÉ thao|b√≥ng ƒë√°|b√≥ng r·ªï|sports|football|soccer|basketball/i,
        /gi·∫£i tr√≠|phim|ca sƒ©|di·ªÖn vi√™n|entertainment|movie|singer|actor/i,
        /tr√≤ ch∆°i|game|gaming|esport/i
      ];
      
      for (const pattern of nonWorkTopics) {
        if (pattern.test(question.trim())) {
          console.log(`üö´ Non-work related topic detected`);
          return true;
        }
      }
      
      return false;
    } catch (error) {
      console.error('Error checking sensitive content:', error);
      return false;
    }
  }

  /**
   * H·ª£p nh·∫•t d·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Object} D·ªØ li·ªáu ƒë√£ h·ª£p nh·∫•t
   */
  async integrateData(question, analysis) {
    try {
      console.log(`üîÑ Integrating data for question: "${question}"`);
      
      // Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a n·ªôi dung nh·∫°y c·∫£m
      const isSensitive = await this.checkSensitiveContent(question);
      if (isSensitive) {
        return {
          documents: [],
          knowledgeEntries: [],
          companyInfo: null,
          departmentInfo: null,
          constraint: {
            answer: "C√¢u h·ªèi c·ªßa b·∫°n c√≥ th·ªÉ ch·ª©a n·ªôi dung nh·∫°y c·∫£m ho·∫∑c n·∫±m ngo√†i ph·∫°m vi c√¥ng vi·ªác. T√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i li·ªáu v√† ho·∫°t ƒë·ªông c·ªßa c√¥ng ty. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi kh√°c.",
            confidence: 100
          },
          metadata: {
            sources: ['constraints'],
            isSensitive: true
          }
        };
      }
      
      // Ki·ªÉm tra n·∫øu c√¢u h·ªèi n·∫±m ngo√†i ph·∫°m vi c√¥ng vi·ªác
      if (analysis.intent === 'general_question' && analysis.topic === 'general_knowledge') {
        return {
          documents: [],
          knowledgeEntries: [],
          companyInfo: null,
          departmentInfo: null,
          constraint: {
            answer: "T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ t√†i li·ªáu c·ªßa c√¥ng ty. C√¢u h·ªèi c·ªßa b·∫°n n·∫±m ngo√†i ph·∫°m vi d·ªØ li·ªáu c·ªßa t√¥i. T√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ t√†i li·ªáu, quy ƒë·ªãnh, quy tr√¨nh c·ªßa c√¥ng ty. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i li·ªáu ho·∫∑c th√¥ng tin c√¥ng ty ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n.",
            confidence: 95
          },
          metadata: {
            sources: ['constraints'],
            isOutOfScope: true
          }
        };
      }
      
      // X√°c ƒë·ªãnh c√°c ngu·ªìn d·ªØ li·ªáu c·∫ßn truy v·∫•n
      const dataSources = this.determineDataSources(analysis);
      
      // Truy v·∫•n d·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn song song
      const dataPromises = dataSources.map(source => this.fetchDataFromSource(source, question, analysis));
      const dataResults = await Promise.all(dataPromises);
      
      // H·ª£p nh·∫•t k·∫øt qu·∫£
      const integratedData = this.mergeResults(dataResults, analysis);
      
      return integratedData;
    } catch (error) {
      console.error('Error integrating data:', error);
      return {
        documents: [],
        knowledgeEntries: [],
        companyInfo: null,
        departmentInfo: null,
        metadata: {}
      };
    }
  }

  /**
   * X√°c ƒë·ªãnh c√°c ngu·ªìn d·ªØ li·ªáu c·∫ßn truy v·∫•n
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Array<string>} Danh s√°ch c√°c ngu·ªìn d·ªØ li·ªáu
   */
  determineDataSources(analysis) {
    const sources = [];
    
    switch (analysis.source) {
      case 'documents':
        sources.push('documents');
        break;
        
      case 'knowledge':
        sources.push('knowledge_base');
        break;
        
      case 'hybrid':
        sources.push('documents', 'knowledge_base');
        break;
        
      case 'constraints':
        sources.push('constraints');
        break;
        
      default:
        sources.push('constraints');
    }
    
    // Th√™m ngu·ªìn d·ªØ li·ªáu v·ªÅ c√¥ng ty n·∫øu c√≥
    if (analysis.company) {
      sources.push('companies');
    }
    
    // Th√™m ngu·ªìn d·ªØ li·ªáu v·ªÅ ph√≤ng ban n·∫øu c√≥
    if (analysis.department) {
      sources.push('departments');
    }
    
    return sources;
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ m·ªôt ngu·ªìn c·ª• th·ªÉ
   * @param {string} source - Ngu·ªìn d·ªØ li·ªáu
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Object} D·ªØ li·ªáu t·ª´ ngu·ªìn
   */
  async fetchDataFromSource(source, question, analysis) {
    try {
      const cacheKey = `${source}:${question}`;
      
      // Ki·ªÉm tra cache
      if (this.dataCache.has(cacheKey)) {
        const cachedData = this.dataCache.get(cacheKey);
        if (Date.now() - cachedData.timestamp < this.cacheTTL) {
          console.log(`üîç Using cached data for ${source}`);
          return { source, data: cachedData.data };
        }
      }
      
      console.log(`üîç Fetching data from ${source}`);
      
      let data = null;
      
      switch (source) {
        case 'documents':
          data = await this.fetchDocuments(question, analysis);
          break;
          
        case 'knowledge_base':
          data = await this.fetchKnowledgeBase(question, analysis);
          break;
          
        case 'companies':
          data = await this.fetchCompanyInfo(analysis.company);
          break;
          
        case 'departments':
          data = await this.fetchDepartmentInfo(analysis.department, analysis.company);
          break;
          
        case 'constraints':
          data = await this.fetchConstraints(question);
          break;
          
        default:
          data = null;
      }
      
      // L∆∞u v√†o cache
      this.dataCache.set(cacheKey, {
        data,
        timestamp: Date.now()
      });
      
      return { source, data };
    } catch (error) {
      console.error(`Error fetching data from ${source}:`, error);
      return { source, data: null, error: error.message };
    }
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ t√†i li·ªáu
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Array} Danh s√°ch t√†i li·ªáu li√™n quan
   */
  async fetchDocuments(question, analysis) {
    try {
      // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√¢u h·ªèi danh s√°ch t√†i li·ªáu theo c√¥ng ty
      if (analysis.intent === 'list_documents' && analysis.company) {
        console.log(`üìë Fetching document list for company: ${analysis.company}`);
        return await db.getDocumentsByCompany(analysis.company);
      }
      
      // T√¨m ki·∫øm t√†i li·ªáu v·ªõi c√°c b·ªô l·ªçc
      const filters = {};
      
      // L·ªçc theo c√¥ng ty
      if (analysis.company) {
        filters.companyId = analysis.company;
      }
      
      // L·ªçc theo ph√≤ng ban (n·∫øu c√≥)
      if (analysis.department) {
        filters.department = analysis.department;
      }
      
      // L·ªçc theo ch·ªß ƒë·ªÅ (n·∫øu c√≥)
      if (analysis.topic) {
        filters.category = analysis.topic;
      }
      
      // Th·ª±c hi·ªán t√¨m ki·∫øm
      const documents = await db.searchDocuments(question, filters);
      
      return documents;
    } catch (error) {
      console.error('Error fetching documents:', error);
      return [];
    }
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ knowledge base
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Array} Danh s√°ch knowledge entries li√™n quan
   */
  async fetchKnowledgeBase(question, analysis) {
    try {
      // T√¨m ki·∫øm trong knowledge base
      const knowledgeEntries = await db.searchKnowledgeBase(question);
      
      // L·ªçc theo c√¥ng ty n·∫øu c√≥
      if (analysis.company && knowledgeEntries.length > 0) {
        return knowledgeEntries.filter(entry => 
          !entry.company_id || entry.company_id === analysis.company
        );
      }
      
      return knowledgeEntries;
    } catch (error) {
      console.error('Error fetching knowledge base:', error);
      return [];
    }
  }

  /**
   * Truy v·∫•n th√¥ng tin c√¥ng ty
   * @param {string} companyCode - M√£ c√¥ng ty
   * @returns {Object} Th√¥ng tin c√¥ng ty
   */
  async fetchCompanyInfo(companyCode) {
    try {
      if (!companyCode) return null;
      
      // T√¨m c√¥ng ty theo m√£
      const companies = await db.getCompanies();
      return companies.find(company => company.code === companyCode) || null;
    } catch (error) {
      console.error('Error fetching company info:', error);
      return null;
    }
  }

  /**
   * Truy v·∫•n th√¥ng tin ph√≤ng ban
   * @param {string} department - T√™n ph√≤ng ban
   * @param {string} companyCode - M√£ c√¥ng ty
   * @returns {Object} Th√¥ng tin ph√≤ng ban
   */
  async fetchDepartmentInfo(department, companyCode) {
    try {
      if (!department) return null;
      
      // T√¨m th√¥ng tin ph√≤ng ban
      const departmentInfo = await db.getDepartmentInfo(department, companyCode);
      return departmentInfo;
    } catch (error) {
      console.error('Error fetching department info:', error);
      return null;
    }
  }

  /**
   * Truy v·∫•n d·ªØ li·ªáu t·ª´ constraints
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @returns {Object} Th√¥ng tin constraints
   */
  async fetchConstraints(question) {
    try {
      // L·∫•y t·∫•t c·∫£ constraints
      const constraints = await db.getConstraints();
      
      // T√¨m constraint ph√π h·ª£p
      for (const constraint of constraints) {
        if (this.matchConstraint(question, constraint.question)) {
          return constraint;
        }
      }
      
      return null;
    } catch (error) {
      console.error('Error fetching constraints:', error);
      return null;
    }
  }

  /**
   * Ki·ªÉm tra xem c√¢u h·ªèi c√≥ kh·ªõp v·ªõi constraint kh√¥ng
   * @param {string} question - C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
   * @param {string} constraintQuestion - C√¢u h·ªèi trong constraint
   * @returns {boolean} K·∫øt qu·∫£ so kh·ªõp
   */
  matchConstraint(question, constraintQuestion) {
    const questionLower = question.toLowerCase().trim();
    const constraintLower = constraintQuestion.toLowerCase().trim();
    
    // Ki·ªÉm tra kh·ªõp ch√≠nh x√°c
    if (questionLower === constraintLower) {
      return true;
    }
    
    // Ki·ªÉm tra kh·ªõp m·ªù
    const questionWords = questionLower.split(/\s+/);
    const constraintWords = constraintLower.split(/\s+/);
    
    let matchCount = 0;
    for (const word of questionWords) {
      if (word.length > 2 && constraintWords.includes(word)) {
        matchCount++;
      }
    }
    
    // N·∫øu ƒë·ªß s·ªë t·ª´ kh·ªõp, coi l√† match
    return matchCount >= Math.min(2, questionWords.length - 1);
  }

  /**
   * H·ª£p nh·∫•t k·∫øt qu·∫£ t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu
   * @param {Array} dataResults - K·∫øt qu·∫£ t·ª´ c√°c ngu·ªìn d·ªØ li·ªáu
   * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch c√¢u h·ªèi
   * @returns {Object} D·ªØ li·ªáu ƒë√£ h·ª£p nh·∫•t
   */
  mergeResults(dataResults, analysis) {
    const result = {
      documents: [],
      knowledgeEntries: [],
      companyInfo: null,
      departmentInfo: null,
      constraint: null,
      metadata: {
        sources: [],
        analysisResult: analysis
      }
    };
    
    // H·ª£p nh·∫•t d·ªØ li·ªáu t·ª´ c√°c ngu·ªìn
    for (const { source, data, error } of dataResults) {
      if (error) {
        result.metadata.errors = result.metadata.errors || {};
        result.metadata.errors[source] = error;
        continue;
      }
      
      if (!data) continue;
      
      result.metadata.sources.push(source);
      
      switch (source) {
        case 'documents':
          result.documents = data;
          break;
          
        case 'knowledge_base':
          result.knowledgeEntries = data;
          break;
          
        case 'companies':
          result.companyInfo = data;
          break;
          
        case 'departments':
          result.departmentInfo = data;
          break;
          
        case 'constraints':
          result.constraint = data;
          break;
      }
    }
    
    // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho c√¢u h·ªèi danh s√°ch t√†i li·ªáu theo c√¥ng ty
    if (analysis.intent === 'list_documents' && result.documents.length > 0) {
      const company = result.companyInfo ? result.companyInfo.name : analysis.company;
      let documentList = '';
      
      if (result.documents.length > 0) {
        documentList = result.documents.map((doc, index) => 
          `${index + 1}. ${doc.original_name} (${doc.category || 'Ch∆∞a ph√¢n lo·∫°i'})`
        ).join('\n');
        
        result.constraint = {
          answer: `Danh s√°ch t√†i li·ªáu thu·ªôc ${company}:\n\n${documentList}`,
          confidence: 100
        };
      } else {
        result.constraint = {
          answer: `Hi·ªán t·∫°i ch∆∞a c√≥ quy ƒë·ªãnh ho·∫∑c quy tr√¨nh n√†o ƒë∆∞·ª£c upload cho ${company}. Vui l√≤ng upload t√†i li·ªáu ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.`,
          confidence: 100
        };
      }
    }
    
    return result;
  }

  /**
   * X√≥a cache
   */
  clearCache() {
    this.dataCache.clear();
    console.log('üßπ Data cache cleared');
  }
}

module.exports = DataIntegrationService; 