const { db } = require('../../../database');

class ContentClassifier {

  // Content policy - check for inappropriate content using database rules
  async isSensitiveContent(question) {
    try {
      const rules = await db.getSensitiveRules(true); // Get only active rules
      
      for (const rule of rules) {
        try {
          const pattern = new RegExp(rule.pattern, 'i');
          if (pattern.test(question.trim())) {
            console.log(`üö´ Sensitive content detected by rule: ${rule.rule_name}`);
            return true;
          }
        } catch (error) {
          console.error(`Error in regex pattern for rule ${rule.rule_name}:`, error);
        }
      }
      
      return false;
    } catch (error) {
      console.error('Error checking sensitive content:', error);
      // Fallback to basic patterns if database fails
      const basicPatterns = [
        /sex|t√¨nh d·ª•c|l√†m t√¨nh|quan h·ªá|khi√™u d√¢m|porn|xxx|nude/i,
        /s√∫ng|ƒë·∫°n|v≈© kh√≠|gi·∫øt|ch·∫øt|b·∫°o l·ª±c|weapon|gun|kill|violence|bomb/i,
        /hack|l·ª´a ƒë·∫£o|scam|cheat|gian l·∫≠n|illegal/i
      ];
      return basicPatterns.some(pattern => pattern.test(question.trim()));
    }
  }

  // Check if question is asking for specific document information
  isDocumentSpecificQuestion(question) {
    // Strong indicators of document-specific questions
    const strongDocumentKeywords = [
      'quy ƒë·ªãnh', 'ch√≠nh s√°ch', 'policy', 't√†i li·ªáu', 'vƒÉn b·∫£n', 'h∆∞·ªõng d·∫´n',
      'quy tr√¨nh', 'process', 'procedure', 'ph√≤ng ban', 'department',
      'ngh·ªâ ph√©p', 'leave', 'vacation', 'l∆∞∆°ng', 'salary', 'th∆∞·ªüng', 'bonus',
      'k·ª∑ lu·∫≠t', 'discipline', 'vi ph·∫°m', 'violation', 'ƒë√°nh gi√°', 'evaluation',
      'tuy·ªÉn d·ª•ng', 'recruitment', 'training', 'ƒë√†o t·∫°o', 'b·∫£o hi·ªÉm', 'insurance',
      'h·ª£p ƒë·ªìng', 'contract', 'th·ªèa thu·∫≠n', 'agreement', 'b√°o c√°o', 'report',
      's∆° ƒë·ªì', 'ch·ª©c nƒÉng', 't·ªï ch·ª©c', 'c∆° c·∫•u', 'c·∫•u tr√∫c', 'ban', 'ph√≤ng',
      'b·ªô ph·∫≠n', 'ƒë∆°n v·ªã', 'tr∆∞·ªüng ph√≤ng', 'gi√°m ƒë·ªëc', 'ch·ªß t·ªãch', 'ceo',
      'organizational chart', 'organization', 'structure', 'hierarchy'
    ];
    
    // Company-related phrases that indicate document queries vs general questions
    const companyDocumentPhrases = [
      'quy ƒë·ªãnh c·ªßa c√¥ng ty', 'ch√≠nh s√°ch c√¥ng ty', 'c√¥ng ty quy ƒë·ªãnh',
      'trong c√¥ng ty', '·ªü c√¥ng ty', 't·∫°i c√¥ng ty', 'c√¥ng ty c√≥'
    ];
    
    const questionLower = question.toLowerCase();
    
    // Check for strong document keywords
    const hasStrongKeyword = strongDocumentKeywords.some(keyword => 
      questionLower.includes(keyword.toLowerCase())
    );
    
    // Check for company document phrases
    const hasCompanyDocumentPhrase = companyDocumentPhrases.some(phrase =>
      questionLower.includes(phrase.toLowerCase())
    );
    
    // Don't treat general "What is X company?" questions as document-specific
    const isGeneralCompanyQuestion = questionLower.match(/^.*(l√† c√¥ng ty n√†o|l√† c√¥ng ty g√¨|what.*company)/);
    
    return (hasStrongKeyword || hasCompanyDocumentPhrase) && !isGeneralCompanyQuestion;
  }

  // Check if question is a general greeting or system question
  isGeneralQuestion(question) {
    const questionLower = question.toLowerCase().trim();
    
    // Danh s√°ch c√°c m·∫´u c√¢u h·ªèi chung
    const generalPatterns = [
      // L·ªùi ch√†o v√† c√¢u h·ªèi v·ªÅ h·ªá th·ªëng
      /^(xin ch√†o|hello|hi|ch√†o|hey)/i,
      /^(c·∫£m ∆°n|thank you|thanks)/i,
      /^(b·∫°n l√† ai|what are you|who are you)/i,
      /^(b·∫°n c√≥ th·ªÉ l√†m g√¨|what can you do)/i,
      /^(h∆∞·ªõng d·∫´n|help|gi√∫p ƒë·ª°)$/i,
      /^(h·ªá th·ªëng|system|ho·∫°t ƒë·ªông)/i,
      /^(test|testing|th·ª≠ nghi·ªám)$/i,
    ];
    
    // C√°c t·ª´ kh√≥a ch·ªâ ra c√¢u h·ªèi li√™n quan ƒë·∫øn ki·∫øn th·ª©c chung ngo√†i ph·∫°m vi c√¥ng ty
    const generalKeywords = [
      'vi·ªát nam', 'th·∫ø gi·ªõi', 'qu·ªëc gia', 'ch√¢u l·ª•c', 'ch√¢u √°', 'ch√¢u √¢u', 'ch√¢u m·ªπ',
      'd√¢n s·ªë', 'di·ªán t√≠ch', 'th·ªß ƒë√¥', 't·ªïng th·ªëng', 'th·ªß t∆∞·ªõng', 'ch·ªß t·ªãch',
      'l·ªãch s·ª≠', 'ƒë·ªãa l√Ω', 'kinh t·∫ø', 'ch√≠nh tr·ªã', 'x√£ h·ªôi', 'vƒÉn h√≥a',
      'ƒë·ªãnh nghƒ©a', 'kh√°i ni·ªám', 'l√† g√¨', '√Ω nghƒ©a', 'gi·∫£i th√≠ch',
      't·∫°i sao', 'v√¨ sao', 'l√Ω do', 'nguy√™n nh√¢n', 'm·ª•c ƒë√≠ch'
    ];
    
    // C√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn c√¥ng ty ho·∫∑c t√†i li·ªáu
    const documentKeywords = [
      't√†i li·ªáu', 'document', 'file', 'pdf', 'quy ƒë·ªãnh', 'quy tr√¨nh',
      'ch√≠nh s√°ch', 'h∆∞·ªõng d·∫´n', 's∆° ƒë·ªì', 'c√¥ng ty', 'ph√≤ng ban',
      'nh√¢n s·ª±', 't√†i ch√≠nh', 'ph√°p ch·∫ø', 'it', 'marketing',
      'pdh', 'pdi', 'pde', 'pdhos', 'rhs', 'ph√°t ƒë·∫°t'
    ];
    
    // Ki·ªÉm tra n·∫øu c√¢u h·ªèi kh·ªõp v·ªõi c√°c m·∫´u c√¢u h·ªèi chung
    const isGeneralPattern = generalPatterns.some(pattern => pattern.test(questionLower));
    
    // Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a t·ª´ kh√≥a ki·∫øn th·ª©c chung
    const hasGeneralKeyword = generalKeywords.some(keyword => 
      questionLower.includes(keyword.toLowerCase())
    );
    
    // Ki·ªÉm tra n·∫øu c√¢u h·ªèi KH√îNG ch·ª©a t·ª´ kh√≥a li√™n quan ƒë·∫øn t√†i li·ªáu ho·∫∑c c√¥ng ty
    const hasNoDocumentKeyword = !documentKeywords.some(keyword => 
      questionLower.includes(keyword.toLowerCase())
    );
    
    // C√¢u h·ªèi ƒë∆∞·ª£c coi l√† c√¢u h·ªèi chung n·∫øu:
    // 1. Kh·ªõp v·ªõi m·∫´u c√¢u h·ªèi chung, HO·∫∂C
    // 2. Ch·ª©a t·ª´ kh√≥a ki·∫øn th·ª©c chung V√Ä kh√¥ng ch·ª©a t·ª´ kh√≥a t√†i li·ªáu/c√¥ng ty
    return isGeneralPattern || (hasGeneralKeyword && hasNoDocumentKeyword);
  }

  // Handle general questions without document search
  async handleGeneralQuestion(question) {
    const lowerQuestion = question.toLowerCase().trim();
    
    // X·ª≠ l√Ω c√¢u ch√†o v√† gi·ªõi thi·ªáu
    if (lowerQuestion.includes('xin ch√†o') || lowerQuestion.includes('ch√†o') || lowerQuestion.includes('hello') || lowerQuestion.includes('hi')) {
      return 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng qu·∫£n l√Ω ki·∫øn th·ª©c PDF. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm th√¥ng tin trong t√†i li·ªáu c·ªßa c√¥ng ty, tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ quy ƒë·ªãnh, quy tr√¨nh v√† t√¨m ki·∫øm t√†i li·ªáu theo c√¥ng ty.';
    }
    
    if (lowerQuestion.includes('c·∫£m ∆°n') || lowerQuestion.includes('thank you') || lowerQuestion.includes('thanks')) {
      return 'Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n v·ªõi c√°c c√¢u h·ªèi v·ªÅ t√†i li·ªáu c·ªßa c√¥ng ty. H√£y ti·∫øp t·ª•c ƒë·∫∑t c√¢u h·ªèi n·∫øu c·∫ßn nh√©!';
    }
    
    if (lowerQuestion.includes('b·∫°n l√† ai') || lowerQuestion.includes('what are you') || lowerQuestion.includes('who are you')) {
      return 'T√¥i l√† tr·ª£ l√Ω AI ƒë∆∞·ª£c t√≠ch h·ª£p v·ªõi Gemini AI, chuy√™n tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n c√°c t√†i li·ªáu PDF trong h·ªá th·ªëng. T√¥i ƒë∆∞·ª£c ƒë√†o t·∫°o ƒë·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm th√¥ng tin, tr·∫£ l·ªùi c√¢u h·ªèi v√† t√≥m t·∫Øt n·ªôi dung t·ª´ c√°c t√†i li·ªáu c·ªßa c√¥ng ty ƒë√£ ƒë∆∞·ª£c upload.';
    }
    
    if (lowerQuestion.includes('l√†m g√¨') || lowerQuestion.includes('what can you do') || lowerQuestion.includes('h∆∞·ªõng d·∫´n') || lowerQuestion.includes('help')) {
      return 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüìÑ **Qu·∫£n l√Ω t√†i li·ªáu**\n‚Ä¢ T√¨m ki·∫øm t√†i li·ªáu theo c√¥ng ty (PDH, PDI, PDE, PDHOS, RHS)\n‚Ä¢ T√¨m ki·∫øm th√¥ng tin trong t√†i li·ªáu\n‚Ä¢ T√≥m t·∫Øt n·ªôi dung t√†i li·ªáu\n\nüí¨ **H·ªèi ƒë√°p th√¥ng minh**\n‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n t√†i li·ªáu c√¥ng ty\n‚Ä¢ Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng\n‚Ä¢ T√¨m ki·∫øm semantic\n\nüîç **V√≠ d·ª• c√¢u h·ªèi**\n‚Ä¢ "Danh s√°ch t√†i li·ªáu thu·ªôc PDI"\n‚Ä¢ "Quy tr√¨nh tuy·ªÉn d·ª•ng c·ªßa c√¥ng ty"\n‚Ä¢ "Ch√≠nh s√°ch ngh·ªâ ph√©p c·ªßa PDH"';
    }
    
    if (lowerQuestion.includes('h·ªá th·ªëng') || lowerQuestion.includes('system') || lowerQuestion.includes('ho·∫°t ƒë·ªông') || lowerQuestion.includes('test')) {
      return 'H·ªá th·ªëng PDF Knowledge Management ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng! üöÄ\n\n‚úÖ K·∫øt n·ªëi database: OK\n‚úÖ Gemini AI: OK\n‚úÖ Upload PDF: S·∫µn s√†ng\n‚úÖ Q&A: S·∫µn s√†ng\n\nB·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ƒë·∫∑t c√¢u h·ªèi v·ªÅ t√†i li·ªáu c√¥ng ty ngay b√¢y gi·ªù!';
    }
    
    // Th√¥ng b√°o cho c√¢u h·ªèi ki·∫øn th·ª©c chung kh√¥ng li√™n quan ƒë·∫øn t√†i li·ªáu
    if (this.isGeneralQuestion(question) && !lowerQuestion.includes('c√¥ng ty') && !lowerQuestion.includes('t√†i li·ªáu')) {
      return 'T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ t√†i li·ªáu c·ªßa c√¥ng ty. C√¢u h·ªèi c·ªßa b·∫°n c√≥ v·∫ª l√† c√¢u h·ªèi ki·∫øn th·ª©c chung n·∫±m ngo√†i ph·∫°m vi d·ªØ li·ªáu c·ªßa t√¥i. T√¥i ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ t√†i li·ªáu, quy ƒë·ªãnh, quy tr√¨nh c·ªßa c√¥ng ty. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i li·ªáu ho·∫∑c th√¥ng tin c√¥ng ty ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n. V√≠ d·ª•: "Danh s√°ch t√†i li·ªáu thu·ªôc PDI" ho·∫∑c "Quy tr√¨nh tuy·ªÉn d·ª•ng c·ªßa c√¥ng ty".';
    }
    
    return 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa h·ªá th·ªëng qu·∫£n l√Ω ki·∫øn th·ª©c PDF. T√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn t√†i li·ªáu v√† th√¥ng tin c·ªßa c√¥ng ty. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi c·ª• th·ªÉ v·ªÅ n·ªôi dung t√†i li·ªáu ho·∫∑c y√™u c·∫ßu danh s√°ch t√†i li·ªáu theo c√¥ng ty (PDH, PDI, PDE, PDHOS, RHS).';
  }
}

module.exports = ContentClassifier; 