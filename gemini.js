const { db } = require('./database');
const ConstraintsService = require('./src/services/constraints/constraintsService');
const DocumentSearchService = require('./src/services/search/documentSearchService');
const ContentClassifier = require('./src/utils/content/contentClassifier');
const GeminiAiService = require('./src/services/ai/geminiAiService');

class GeminiService {
  constructor() {
    this.constraintsService = new ConstraintsService();
    this.searchService = new DocumentSearchService();
    this.contentClassifier = new ContentClassifier();
    this.aiService = new GeminiAiService();
  }

  // Delegate methods to appropriate services
  getConstraints() {
    return this.constraintsService.getConstraints();
  }

  addConstraint(question, answer) {
    return this.constraintsService.addConstraint(question, answer);
  }

  removeConstraint(question) {
    return this.constraintsService.removeConstraint(question);
  }

  // Check if question should prioritize knowledge base over constraints
  isKnowledgePriorityQuestion(question) {
    const questionLower = question.toLowerCase();
    
    // Keywords that indicate specific policy questions where knowledge base should have priority
    const knowledgePriorityKeywords = [
      'ngh·ªâ ph√©p', 'ng√†y ph√©p', 'vacation', 'leave', 'days off',
      'ch√≠nh s√°ch ngh·ªâ', 'quy ƒë·ªãnh ngh·ªâ', 'ngh·ªâ bao nhi√™u',
      'bu·ªïi ngh·ªâ', 'th√°ng ngh·ªâ', 'nƒÉm ngh·ªâ',
      'policy ngh·ªâ', 'leave policy', 'vacation policy'
    ];
    
    // Keywords for listing regulations/processes (should search documents)
    const documentListKeywords = [
      'c√°c quy ƒë·ªãnh', 'c√°c quy tr√¨nh', 'quy ƒë·ªãnh quy tr√¨nh',
      'danh s√°ch quy ƒë·ªãnh', 'danh s√°ch quy tr√¨nh',
      'regulations list', 'process list', 'policies list',
      'quy ƒë·ªãnh hi·ªán t·∫°i', 'quy tr√¨nh hi·ªán t·∫°i',
      'c√≥ nh·ªØng quy ƒë·ªãnh', 'c√≥ nh·ªØng quy tr√¨nh'
    ];
    
    // Company-specific policy patterns
    const companyPolicyPatterns = [
      /\w+\s+(ngh·ªâ|ph√©p|vacation|leave)/,  // "PDH ngh·ªâ", "company vacation"
      /(ngh·ªâ|ph√©p|vacation|leave)\s+c·ªßa\s+\w+/, // "ngh·ªâ c·ªßa PDH"
      /(quy ƒë·ªãnh|ch√≠nh s√°ch|policy)\s+(ngh·ªâ|ph√©p|vacation|leave)/, // "quy ƒë·ªãnh ngh·ªâ ph√©p"
      /(theo\s+quy\s+ƒë·ªãnh|according\s+to\s+policy).*\s+(ngh·ªâ|ph√©p|vacation|leave)/ // "theo quy ƒë·ªãnh... ngh·ªâ ph√©p"
    ];
    
    // Document listing patterns
    const documentListPatterns = [
      /(c√°c|danh\s+s√°ch|list)\s+(quy\s+ƒë·ªãnh|quy\s+tr√¨nh|policies|processes)/,
      /(quy\s+ƒë·ªãnh|quy\s+tr√¨nh|policies|processes)\s+(hi·ªán\s+t·∫°i|current|c·ªßa\s+\w+)/,
      /(c√≥\s+nh·ªØng|what)\s+(quy\s+ƒë·ªãnh|quy\s+tr√¨nh|policies|processes)/
    ];
    
    // Check for specific keywords
    for (const keyword of knowledgePriorityKeywords) {
      if (questionLower.includes(keyword)) {
        return true;
      }
    }
    
    // Check for document list keywords
    for (const keyword of documentListKeywords) {
      if (questionLower.includes(keyword)) {
        return true;
      }
    }
    
    // Check for patterns
    for (const pattern of companyPolicyPatterns) {
      if (pattern.test(questionLower)) {
        return true;
      }
    }
    
    // Check for document list patterns
    for (const pattern of documentListPatterns) {
      if (pattern.test(questionLower)) {
        return true;
      }
    }
    
    return false;
  }

  // Process document listing questions
  async processDocumentListQuestion(question, startTime) {
    try {
      console.log(`üìã Processing document listing question: ${question}`);
      
      // Extract company from question (default to PDH if not specified)
      const company = this.extractCompanyFromQuestion(question) || 'PDH';
      console.log(`üè¢ Target company: ${company}`);
      
      // Get documents for the company
      const documents = await db.getDocumentsByCompany(company);
      console.log(`üìÑ Found ${documents.length} documents for ${company}`);
      
      if (documents.length === 0) {
        const answer = `Hi·ªán t·∫°i ch∆∞a c√≥ quy ƒë·ªãnh ho·∫∑c quy tr√¨nh n√†o ƒë∆∞·ª£c upload cho c√¥ng ty ${company}. Vui l√≤ng upload t√†i li·ªáu ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.`;
        const responseTime = Date.now() - startTime;
        
        await db.createQuestion({
          question,
          answer,
          documentIds: [],
          responseTime
        });
        
        return {
          answer,
          documentIds: [],
          relevantDocuments: [],
          responseTime
        };
      }
      
      // Group documents by category
      const categorizedDocs = {};
      documents.forEach(doc => {
        const category = doc.category || 'Kh√°c';
        if (!categorizedDocs[category]) {
          categorizedDocs[category] = [];
        }
        categorizedDocs[category].push(doc);
      });
      
      // Generate formatted answer
      let answer = `üìã **C√°c quy ƒë·ªãnh v√† quy tr√¨nh hi·ªán t·∫°i c·ªßa ${company}:**\n\n`;
      
      Object.keys(categorizedDocs).forEach(category => {
        answer += `üìÇ **${category}:**\n`;
        categorizedDocs[category].forEach(doc => {
          answer += `‚Ä¢ ${doc.original_name}\n`;
        });
        answer += '\n';
      });
      
      answer += `\nüí° *T·ªïng c·ªông: ${documents.length} t√†i li·ªáu*\n`;
      answer += `üìÖ *C·∫≠p nh·∫≠t g·∫ßn nh·∫•t: ${new Date().toLocaleDateString('vi-VN')}*`;
      
      const responseTime = Date.now() - startTime;
      
      await db.createQuestion({
        question,
        answer,
        documentIds: documents.map(doc => doc.id),
        responseTime
      });
      
      return {
        answer,
        documentIds: documents.map(doc => doc.id),
        relevantDocuments: documents.map(doc => ({
          id: doc.id,
          name: doc.original_name,
          category: doc.category,
          uploadDate: doc.upload_date
        })),
        responseTime
      };
      
    } catch (error) {
      console.error('Error processing document list question:', error);
      throw error;
    }
  }

  // Extract company code from question
  extractCompanyFromQuestion(question) {
    const companies = ['PDH', 'PDI', 'PDE', 'PDHH', 'RH'];
    const questionUpper = question.toUpperCase();
    
    for (const company of companies) {
      if (questionUpper.includes(company)) {
        return company;
      }
    }
    
    return null;
  }

  // Check if question is asking for document listing
  isDocumentListQuestion(question) {
    const questionLower = question.toLowerCase();
    
    const documentListKeywords = [
      'c√°c quy ƒë·ªãnh', 'c√°c quy tr√¨nh', 'quy ƒë·ªãnh quy tr√¨nh',
      'danh s√°ch quy ƒë·ªãnh', 'danh s√°ch quy tr√¨nh',
      'quy ƒë·ªãnh hi·ªán t·∫°i', 'quy tr√¨nh hi·ªán t·∫°i',
      'c√≥ nh·ªØng quy ƒë·ªãnh', 'c√≥ nh·ªØng quy tr√¨nh'
    ];
    
    const documentListPatterns = [
      /(c√°c|danh\s+s√°ch|list)\s+(quy\s+ƒë·ªãnh|quy\s+tr√¨nh|policies|processes)/,
      /(quy\s+ƒë·ªãnh|quy\s+tr√¨nh|policies|processes)\s+(hi·ªán\s+t·∫°i|current|c·ªßa\s+\w+)/,
      /(c√≥\s+nh·ªØng|what)\s+(quy\s+ƒë·ªãnh|quy\s+tr√¨nh|policies|processes)/
    ];
    
    // Check for document list keywords
    for (const keyword of documentListKeywords) {
      if (questionLower.includes(keyword)) {
        return true;
      }
    }
    
    // Check for document list patterns
    for (const pattern of documentListPatterns) {
      if (pattern.test(questionLower)) {
        return true;
      }
    }
    
    return false;
  }

  // Main Q&A function
  async askQuestion(question) {
    const startTime = Date.now();
    
    try {
      console.log(`\nüîç Processing question: "${question}"`);
      
      // Check for sensitive content first
      const isSensitive = await this.contentClassifier.isSensitiveContent(question);
      console.log(`üõ°Ô∏è Sensitive content check: ${isSensitive}`);
      
      if (isSensitive) {
        console.log(`‚ùå Blocked sensitive content`);
        const answer = 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y v√¨ n√≥ c√≥ th·ªÉ ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p. T√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªõi c√°c c√¢u h·ªèi t√≠ch c·ª±c v√† c√≥ t√≠nh x√¢y d·ª±ng. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi kh√°c.';
        const responseTime = Date.now() - startTime;
        
        await db.createQuestion({
          question,
          answer,
          documentIds: [],
          responseTime
        });
        
        return {
          answer,
          documentIds: [],
          relevantDocuments: [],
          responseTime
        };
      }

      // Check if this is a knowledge-priority question (vacation, leave, specific policies)
      const isKnowledgePriority = this.isKnowledgePriorityQuestion(question);
      console.log(`üìö Knowledge priority check: ${isKnowledgePriority}`);
      
      if (isKnowledgePriority) {
        console.log(`üìö Checking knowledge base first for priority question`);
        
        // Check if this is a document listing question
        const isDocumentList = this.isDocumentListQuestion(question);
        
        if (isDocumentList) {
          console.log(`üìã Processing document listing question`);
          return await this.processDocumentListQuestion(question, startTime);
        }
        
        // For other knowledge priority questions, check knowledge base
        const knowledgeResults = await this.searchService.searchKnowledgeBase(question);
        
        if (knowledgeResults.length > 0) {
          console.log(`‚úÖ Found ${knowledgeResults.length} knowledge entries, using knowledge base`);
          return await this.aiService.processWithKnowledge(question, knowledgeResults, startTime);
        }
        console.log(`‚ùå No knowledge found, continuing with normal flow`);
      }

      // Check constraints (high priority for general questions)
      const constraintAnswer = this.constraintsService.checkConstraints(question);
      console.log(`üîí Constraint check: ${constraintAnswer ? 'Found match' : 'No match'}`);
      
      if (constraintAnswer) {
        console.log(`‚úÖ Using constraint answer`);
        const responseTime = Date.now() - startTime;
        
        await db.createQuestion({
          question,
          answer: constraintAnswer,
          documentIds: [],
          responseTime
        });
        
        return {
          answer: constraintAnswer,
          documentIds: [],
          relevantDocuments: [],
          responseTime
        };
      }

      // Check if it's a general question first
      const isGeneral = this.contentClassifier.isGeneralQuestion(question);
      console.log(`üí¨ General question check: ${isGeneral}`);
      
      if (isGeneral) {
        console.log(`‚úÖ Handling as general greeting`);
        const answer = await this.contentClassifier.handleGeneralQuestion(question);
        const responseTime = Date.now() - startTime;
        
        await db.createQuestion({
          question,
          answer,
          documentIds: [],
          responseTime
        });
        
        return {
          answer,
          documentIds: [],
          relevantDocuments: [],
          responseTime
        };
      }
      
      // Check if it's a document-specific question
      const isDocumentSpecific = this.contentClassifier.isDocumentSpecificQuestion(question);
      console.log(`üìÑ Document-specific check: ${isDocumentSpecific}`);
      
      if (isDocumentSpecific) {
        console.log(`üìã Searching for relevant documents...`);
        const relevantDocs = await this.searchService.findRelevantDocuments(question);
        console.log(`üìä Found ${relevantDocs.length} relevant documents`);
        
        if (relevantDocs.length === 0) {
          console.log(`‚ùå No documents found, returning standard message`);
          const answer = 'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng:\n\n‚Ä¢ Ki·ªÉm tra l·∫°i t·ª´ kh√≥a\n‚Ä¢ Upload th√™m t√†i li·ªáu li√™n quan\n‚Ä¢ Th·ª≠ ƒë·∫∑t c√¢u h·ªèi kh√°c\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm ƒë·ªÉ xem c√°c t√†i li·ªáu hi·ªán c√≥ trong h·ªá th·ªëng.';
          const responseTime = Date.now() - startTime;
          
          await db.createQuestion({
            question,
            answer,
            documentIds: [],
            responseTime
          });
          
          return {
            answer,
            documentIds: [],
            relevantDocuments: [],
            responseTime
          };
        }
        
        // Process with documents
        return await this.aiService.processWithDocuments(question, relevantDocs, startTime);
      }
      
      // For general questions, use Gemini without documents
      console.log(`ü§ñ Handling as general chatbot question`);
      const answer = await this.aiService.handleGeneralChatbotQuestion(question);
      const responseTime = Date.now() - startTime;
      console.log(`‚úÖ Generated answer: ${answer.substring(0, 50)}...`);
      
      await db.createQuestion({
        question,
        answer,
        documentIds: [],
        responseTime
      });
      
      return {
        answer,
        documentIds: [],
        relevantDocuments: [],
        responseTime
      };
      
    } catch (error) {
      console.error('Error in askQuestion:', error);
      throw new Error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }

  // Delegate document operations to AI service
  async summarizeDocument(documentId) {
    return this.aiService.summarizeDocument(documentId);
  }

  async extractKeyInfo(searchTerm) {
    return this.aiService.extractKeyInfo(searchTerm);
  }
}

module.exports = new GeminiService(); 