const { db } = require('./database');
const ConstraintsService = require('./src/services/constraints/constraintsService');
const DocumentSearchService = require('./src/services/search/documentSearchService');
const ContentClassifier = require('./src/utils/content/contentClassifier');
const GeminiAiService = require('./src/services/ai/geminiAiService');

class GeminiService {
  constructor() {
    this.constraintsService = new ConstraintsService();
    this.searchService = new DocumentSearchService();
    this.contentClassifier = new ContentClassifier();
    this.aiService = new GeminiAiService();
  }

  // Delegate methods to appropriate services
  getConstraints() {
    return this.constraintsService.getConstraints();
  }

  addConstraint(question, answer) {
    return this.constraintsService.addConstraint(question, answer);
  }

  removeConstraint(question) {
    return this.constraintsService.removeConstraint(question);
  }

  // Main Q&A function
  async askQuestion(question) {
    const startTime = Date.now();
    
    try {
      console.log(`\nüîç Processing question: "${question}"`);
      
      // Check for sensitive content first
      const isSensitive = await this.contentClassifier.isSensitiveContent(question);
      console.log(`üõ°Ô∏è Sensitive content check: ${isSensitive}`);
      
      if (isSensitive) {
        console.log(`‚ùå Blocked sensitive content`);
        const answer = 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y v√¨ n√≥ c√≥ th·ªÉ ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p. T√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªõi c√°c c√¢u h·ªèi t√≠ch c·ª±c v√† c√≥ t√≠nh x√¢y d·ª±ng. Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi kh√°c.';
        const responseTime = Date.now() - startTime;
        
        await db.createQuestion({
          question,
          answer,
          documentIds: [],
          responseTime
        });
        
        return {
          answer,
          documentIds: [],
          relevantDocuments: [],
          responseTime
        };
      }

      // Check constraints first (highest priority)
      const constraintAnswer = this.constraintsService.checkConstraints(question);
      console.log(`üîí Constraint check: ${constraintAnswer ? 'Found match' : 'No match'}`);
      
      if (constraintAnswer) {
        console.log(`‚úÖ Using constraint answer`);
        const responseTime = Date.now() - startTime;
        
        await db.createQuestion({
          question,
          answer: constraintAnswer,
          documentIds: [],
          responseTime
        });
        
        return {
          answer: constraintAnswer,
          documentIds: [],
          relevantDocuments: [],
          responseTime
        };
      }

      // Check if it's a general question first
      const isGeneral = this.contentClassifier.isGeneralQuestion(question);
      console.log(`üí¨ General question check: ${isGeneral}`);
      
      if (isGeneral) {
        console.log(`‚úÖ Handling as general greeting`);
        const answer = await this.contentClassifier.handleGeneralQuestion(question);
        const responseTime = Date.now() - startTime;
        
        await db.createQuestion({
          question,
          answer,
          documentIds: [],
          responseTime
        });
        
        return {
          answer,
          documentIds: [],
          relevantDocuments: [],
          responseTime
        };
      }
      
      // Check if it's a document-specific question
      const isDocumentSpecific = this.contentClassifier.isDocumentSpecificQuestion(question);
      console.log(`üìÑ Document-specific check: ${isDocumentSpecific}`);
      
      if (isDocumentSpecific) {
        console.log(`üìã Searching for relevant documents...`);
        const relevantDocs = await this.searchService.findRelevantDocuments(question);
        console.log(`üìä Found ${relevantDocs.length} relevant documents`);
        
        if (relevantDocs.length === 0) {
          console.log(`‚ùå No documents found, returning standard message`);
          const answer = 'Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng:\n\n‚Ä¢ Ki·ªÉm tra l·∫°i t·ª´ kh√≥a\n‚Ä¢ Upload th√™m t√†i li·ªáu li√™n quan\n‚Ä¢ Th·ª≠ ƒë·∫∑t c√¢u h·ªèi kh√°c\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm ƒë·ªÉ xem c√°c t√†i li·ªáu hi·ªán c√≥ trong h·ªá th·ªëng.';
          const responseTime = Date.now() - startTime;
          
          await db.createQuestion({
            question,
            answer,
            documentIds: [],
            responseTime
          });
          
          return {
            answer,
            documentIds: [],
            relevantDocuments: [],
            responseTime
          };
        }
        
        // Process with documents
        return await this.aiService.processWithDocuments(question, relevantDocs, startTime);
      }
      
      // For general questions, use Gemini without documents
      console.log(`ü§ñ Handling as general chatbot question`);
      const answer = await this.aiService.handleGeneralChatbotQuestion(question);
      const responseTime = Date.now() - startTime;
      console.log(`‚úÖ Generated answer: ${answer.substring(0, 50)}...`);
      
      await db.createQuestion({
        question,
        answer,
        documentIds: [],
        responseTime
      });
      
      return {
        answer,
        documentIds: [],
        relevantDocuments: [],
        responseTime
      };
      
    } catch (error) {
      console.error('Error in askQuestion:', error);
      throw new Error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }

  // Delegate document operations to AI service
  async summarizeDocument(documentId) {
    return this.aiService.summarizeDocument(documentId);
  }

  async extractKeyInfo(searchTerm) {
    return this.aiService.extractKeyInfo(searchTerm);
  }
}

module.exports = new GeminiService(); 