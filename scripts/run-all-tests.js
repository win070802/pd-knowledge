const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
require('dotenv').config();

// Danh s√°ch c√°c script test c·∫ßn ch·∫°y
const testScripts = [
  'test-ocr.js',
  'test-department-detection.js',
  'test-document-classification.js'
];

// Th∆∞ m·ª•c l∆∞u b√°o c√°o k·∫øt qu·∫£
const reportDir = './testFolder/test-reports';
if (!fs.existsSync(reportDir)) {
  fs.mkdirSync(reportDir, { recursive: true });
}

// Ki·ªÉm tra n·∫øu c√≥ th∆∞ m·ª•c k·∫øt qu·∫£ kh√°c
const resultDirs = [
  './testFolder/ocr-results',
  './testFolder/department-results',
  './testFolder/classification-results'
];

resultDirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// Ch·∫°y c√°c script test l·∫ßn l∆∞·ª£t
async function runAllTests() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu ch·∫°y t·∫•t c·∫£ c√°c b√†i test OCR...\n');
  
  // T·∫°o file b√°o c√°o
  const reportFile = path.join(reportDir, `ocr-test-report-${new Date().toISOString().replace(/:/g, '-')}.log`);
  
  // Ghi th√¥ng tin m√¥i tr∆∞·ªùng
  let report = `=== B√ÅO C√ÅO KI·ªÇM TH·ª¨ OCR ===\n`;
  report += `Th·ªùi gian: ${new Date().toLocaleString()}\n`;
  report += `Node version: ${process.version}\n`;
  report += `Platform: ${process.platform}\n\n`;
  
  fs.writeFileSync(reportFile, report);
  
  // Ch·∫°y t·ª´ng script test
  for (const script of testScripts) {
    console.log(`\nüìã ƒêang ch·∫°y test: ${script}...\n`);
    
    // Ch·∫°y script v√† ƒë·ª£i k·∫øt qu·∫£
    await new Promise((resolve, reject) => {
      // T·∫°o stream ƒë·ªÉ ghi log ra c·∫£ console v√† file
      const logFile = fs.createWriteStream(reportFile, { flags: 'a' });
      
      // Ch·∫°y script test
      const child = exec(`node ./scripts/${script}`, {
        maxBuffer: 1024 * 1024 * 10 // 10MB buffer cho output
      });
      
      // Ghi output ra console v√† file
      child.stdout.on('data', (data) => {
        process.stdout.write(data);
        logFile.write(data);
      });
      
      child.stderr.on('data', (data) => {
        process.stderr.write(data);
        logFile.write(`[ERROR] ${data}`);
      });
      
      child.on('close', (code) => {
        const result = `\n=== K·∫øt qu·∫£ test ${script}: ${code === 0 ? 'TH√ÄNH C√îNG' : 'TH·∫§T B·∫†I'} (exit code ${code}) ===\n\n`;
        fs.appendFileSync(reportFile, result);
        console.log(result);
        resolve();
      });
      
      child.on('error', (error) => {
        const errorMsg = `\n[ERROR] L·ªói khi ch·∫°y ${script}: ${error.message}\n`;
        fs.appendFileSync(reportFile, errorMsg);
        console.error(errorMsg);
        reject(error);
      });
    }).catch(error => {
      console.error(`L·ªói khi ch·∫°y ${script}:`, error);
    });
    
    // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c test ƒë·ªÉ tr√°nh xung ƒë·ªôt t√†i nguy√™n
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // K·∫øt h·ª£p t·∫•t c·∫£ k·∫øt qu·∫£ th√†nh m·ªôt b√°o c√°o t·ªïng h·ª£p
  console.log('\nüìä ƒêang t·∫°o b√°o c√°o t·ªïng h·ª£p...');
  
  try {
    // K·∫øt h·ª£p c√°c k·∫øt qu·∫£ t·ª´ c√°c th∆∞ m·ª•c
    const summaryFile = path.join(reportDir, 'ocr-test-summary.json');
    const summary = {
      testTime: new Date().toISOString(),
      ocr: {
        filesProcessed: 0,
        results: []
      },
      departmentDetection: {
        filesAnalyzed: 0,
        results: null
      },
      classification: {
        filesClassified: 0,
        results: null
      }
    };
    
    // ƒê·ªçc k·∫øt qu·∫£ OCR
    const ocrDir = './testFolder/ocr-results';
    if (fs.existsSync(ocrDir)) {
      const ocrFiles = fs.readdirSync(ocrDir);
      summary.ocr.filesProcessed = ocrFiles.filter(f => f.endsWith('_OCR_Results.txt')).length;
      summary.ocr.results = ocrFiles;
    }
    
    // ƒê·ªçc k·∫øt qu·∫£ ph√°t hi·ªán ph√≤ng ban
    const deptFile = './testFolder/department-results/department_detection_results.json';
    if (fs.existsSync(deptFile)) {
      const deptData = JSON.parse(fs.readFileSync(deptFile, 'utf8'));
      summary.departmentDetection.filesAnalyzed = deptData.length;
      summary.departmentDetection.results = deptData;
    }
    
    // ƒê·ªçc k·∫øt qu·∫£ ph√¢n lo·∫°i
    const classFile = './testFolder/classification-results/document_classification_results.json';
    if (fs.existsSync(classFile)) {
      const classData = JSON.parse(fs.readFileSync(classFile, 'utf8'));
      summary.classification.filesClassified = classData.length;
      summary.classification.results = classData;
    }
    
    // L∆∞u b√°o c√°o t·ªïng h·ª£p
    fs.writeFileSync(summaryFile, JSON.stringify(summary, null, 2));
    console.log(`‚úÖ ƒê√£ l∆∞u b√°o c√°o t·ªïng h·ª£p v√†o: ${summaryFile}`);
    
    // T·∫°o b√°o c√°o cu·ªëi c√πng
    const finalReport = `
=== B√ÅO C√ÅO T·ªîNG H·ª¢P KI·ªÇM TH·ª¨ OCR ===

Th·ªùi gian: ${new Date().toLocaleString()}
S·ªë file PDF ƒë√£ x·ª≠ l√Ω: ${summary.ocr.filesProcessed}
S·ªë file ƒë√£ ph√¢n t√≠ch ph√≤ng ban: ${summary.departmentDetection.filesAnalyzed}
S·ªë file ƒë√£ ph√¢n lo·∫°i: ${summary.classification.filesClassified}

Chi ti·∫øt b√°o c√°o ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: ${summaryFile}
File log ƒë·∫ßy ƒë·ªß: ${reportFile}

K·∫øt qu·∫£ OCR: ${ocrDir}
K·∫øt qu·∫£ ph√°t hi·ªán ph√≤ng ban: ${deptFile}
K·∫øt qu·∫£ ph√¢n lo·∫°i: ${classFile}
    `;
    
    fs.appendFileSync(reportFile, finalReport);
    console.log(finalReport);
    
  } catch (error) {
    console.error('L·ªói khi t·∫°o b√°o c√°o t·ªïng h·ª£p:', error);
  }
  
  console.log('\n‚úÖ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c b√†i test OCR!');
}

// Th·ª±c thi
runAllTests().catch(console.error); 