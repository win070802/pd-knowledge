const { pool } = require('../../src/config/database');
const fs = require('fs');
const path = require('path');

/**
 * X√≥a v√† t·∫°o l·∫°i c√°c b·∫£ng li√™n quan ƒë·∫øn t√†i li·ªáu v√† c√¥ng ty
 */
async function recreateDocumentTables() {
  const client = await pool.connect();
  
  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu x√≥a v√† t·∫°o l·∫°i c√°c b·∫£ng t√†i li·ªáu v√† c√¥ng ty...');
    
    // B·∫Øt ƒë·∫ßu transaction
    await client.query('BEGIN');
    
    // 1. X√≥a c√°c b·∫£ng li√™n quan ƒë·∫øn t√†i li·ªáu v√† c√¥ng ty
    console.log('üóëÔ∏è ƒêang x√≥a c√°c b·∫£ng li√™n quan...');
    
    // X√≥a c√°c b·∫£ng ph·ª• thu·ªôc tr∆∞·ªõc
    const dropTables = [
      'entity_references',
      'validation_logs',
      'document_metadata',
      'company_metadata',
      'document_chunks',
      'knowledge_base',
      'knowledge',
      'documents',
      'departments',
      'companies'
    ];
    
    for (const table of dropTables) {
      try {
        await client.query(`DROP TABLE IF EXISTS ${table} CASCADE`);
        console.log(`‚úÖ ƒê√£ x√≥a b·∫£ng ${table}`);
      } catch (error) {
        console.error(`‚ùå L·ªói khi x√≥a b·∫£ng ${table}:`, error.message);
      }
    }
    
    // 2. T·∫°o c√°c extension c·∫ßn thi·∫øt
    console.log('üß© ƒêang t·∫°o c√°c extension c·∫ßn thi·∫øt...');
    
    try {
      // T·∫°o extension cho UUID
      await client.query('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"');
      console.log('‚úÖ ƒê√£ t·∫°o extension uuid-ossp');
      
      // T·∫°o extension cho vector search (c·∫ßn c√†i ƒë·∫∑t pgvector)
      await client.query('CREATE EXTENSION IF NOT EXISTS vector');
      console.log('‚úÖ ƒê√£ t·∫°o extension vector');
      
      // T·∫°o extension cho full-text search
      await client.query('CREATE EXTENSION IF NOT EXISTS pg_trgm');
      console.log('‚úÖ ƒê√£ t·∫°o extension pg_trgm');
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o extensions:', error.message);
      console.log('‚ö†Ô∏è Ti·∫øp t·ª•c qu√° tr√¨nh t·∫°o b·∫£ng...');
    }
    
    // 3. T·∫°o b·∫£ng companies
    console.log('üìä ƒêang t·∫°o b·∫£ng companies...');
    
    await client.query(`
      CREATE TABLE companies (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          
          -- Th√¥ng tin c∆° b·∫£n
          company_code VARCHAR(20) UNIQUE NOT NULL,
          company_name VARCHAR(255) NOT NULL,
          company_name_en VARCHAR(255),
          short_name VARCHAR(100),
          
          -- Th√¥ng tin ph√°p l√Ω
          legal_form VARCHAR(50), -- C√¥ng ty CP, TNHH, v.v.
          tax_code VARCHAR(20) UNIQUE,
          business_license VARCHAR(50),
          
          -- ƒê·ªãa ch·ªâ
          headquarters_address TEXT,
          postal_code VARCHAR(10),
          city VARCHAR(100),
          province VARCHAR(100),
          country VARCHAR(100) DEFAULT 'Vietnam',
          
          -- Li√™n h·ªá
          phone VARCHAR(20),
          fax VARCHAR(20),
          email VARCHAR(100),
          website VARCHAR(255),
          
          -- Th√¥ng tin doanh nghi·ªáp
          industry VARCHAR(100),
          business_type VARCHAR(50), -- Parent, Subsidiary, Partner, etc.
          parent_company_id UUID REFERENCES companies(id),
          
          -- Th√¥ng tin t√†i ch√≠nh
          registered_capital DECIMAL(20,2),
          charter_capital DECIMAL(20,2),
          currency_code VARCHAR(3) DEFAULT 'VND',
          fiscal_year_end DATE,
          
          -- Th√¥ng tin qu·∫£n tr·ªã
          legal_representative VARCHAR(100),
          ceo VARCHAR(100),
          chairman VARCHAR(100),
          
          -- Metadata
          status VARCHAR(20) DEFAULT 'active', -- active, inactive, dissolved
          established_date DATE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          created_by VARCHAR(100),
          updated_by VARCHAR(100),
          
          -- Th√¥ng tin b·ªï sung
          description TEXT,
          tags TEXT[], -- Array of tags
          custom_fields JSONB, -- Flexible fields for additional data
          
          -- C√°c tr∆∞·ªùng b·ªï sung t·ª´ INSERT statement
          document_naming_convention VARCHAR(100),
          default_retention_policy JSONB,
          document_approval_workflow JSONB,
          security_policies JSONB,
          compliance_requirements TEXT[],
          departments JSONB,
          business_functions JSONB,
          document_categories JSONB,
          workflow_templates JSONB,
          supported_languages TEXT[],
          company_branding JSONB
      )
    `);
    console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng companies');
    
    // 4. T·∫°o b·∫£ng document_metadata
    console.log('üìä ƒêang t·∫°o b·∫£ng document_metadata...');
    
    await client.query(`
      CREATE TABLE document_metadata (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          
          -- ============== DUBLIN CORE METADATA (ISO 15836) ==============
          -- Th√¥ng tin c∆° b·∫£n
          dc_identifier VARCHAR(255) UNIQUE NOT NULL,
          dc_title VARCHAR(500) NOT NULL,
          dc_description TEXT,
          dc_type VARCHAR(100) NOT NULL, -- Contract, Policy, Procedure, Report, etc.
          dc_format VARCHAR(100), -- PDF, DOCX, etc.
          dc_language VARCHAR(10) DEFAULT 'vi',
          dc_source VARCHAR(255),
          dc_rights TEXT,
          
          -- Ng∆∞·ªùi t·∫°o v√† ƒë√≥ng g√≥p
          dc_creator TEXT[], -- Array of creators
          dc_contributor TEXT[], -- Array of contributors
          dc_publisher VARCHAR(255),
          
          -- Ch·ªß ƒë·ªÅ v√† ph√¢n lo·∫°i
          dc_subject TEXT[], -- Array of subjects
          dc_relation TEXT[], -- Array of related resources
          
          -- Th·ªùi gian v√† ƒë·ªãa ƒëi·ªÉm
          dc_date TIMESTAMP NOT NULL,
          dc_coverage_spatial VARCHAR(255),
          dc_coverage_temporal VARCHAR(255),
          
          -- ============== RECORDS MANAGEMENT (ISO 23081) ==============
          record_identifier VARCHAR(255) UNIQUE NOT NULL,
          record_class VARCHAR(100) NOT NULL,
          record_status VARCHAR(20) DEFAULT 'active', -- active, inactive, disposed, destroyed
          
          -- L∆∞u tr·ªØ v√† b·∫£o qu·∫£n
          retention_period INTEGER, -- Th·ªùi h·∫°n l∆∞u tr·ªØ (nƒÉm)
          retention_trigger VARCHAR(100), -- S·ª± ki·ªán k√≠ch ho·∫°t
          disposal_action VARCHAR(50), -- destroy, transfer, review
          
          -- B·∫£o m·∫≠t
          security_classification VARCHAR(20) DEFAULT 'internal', -- public, internal, confidential, secret, top-secret
          access_conditions TEXT,
          access_restrictions TEXT[],
          authorized_users TEXT[],
          
          -- Qu·∫£n l√Ω l∆∞u tr·ªØ
          custodian VARCHAR(100),
          storage_location VARCHAR(255),
          storage_format VARCHAR(100),
          technical_requirements TEXT,
          
          -- ============== BUSINESS PROCESS METADATA ==============
          -- Th√¥ng tin t·ªï ch·ª©c
          company_id UUID REFERENCES companies(id),
          organization_name VARCHAR(255),
          organization_code VARCHAR(50),
          department VARCHAR(100),
          business_function VARCHAR(100),
          
          -- Quy tr√¨nh l√†m vi·ªác
          workflow_process_name VARCHAR(255),
          workflow_process_owner VARCHAR(100),
          workflow_current_stage VARCHAR(100),
          workflow_approval_required BOOLEAN DEFAULT false,
          workflow_approvers TEXT[],
          workflow_escalation_path TEXT[],
          
          -- Tu√¢n th·ªß
          regulatory_requirements TEXT[],
          compliance_status VARCHAR(50),
          audit_trail JSONB, -- Array of audit events
          
          -- ============== LIFECYCLE MANAGEMENT ==============
          -- Phi√™n b·∫£n
          version_major INTEGER DEFAULT 1,
          version_minor INTEGER DEFAULT 0,
          version_patch INTEGER DEFAULT 0,
          version_history JSONB, -- Array of version history
          
          -- Ng√†y th√°ng quan tr·ªçng
          date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          date_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          date_published TIMESTAMP,
          date_effective TIMESTAMP,
          date_expires TIMESTAMP,
          date_review TIMESTAMP,
          
          -- Tr·∫°ng th√°i t√†i li·ªáu
          document_state VARCHAR(20) DEFAULT 'draft', -- draft, review, approved, published, withdrawn, superseded
          state_transitions JSONB, -- Array of state transitions
          
          -- ============== TECHNICAL METADATA ==============
          -- Th√¥ng tin file
          file_size BIGINT,
          file_checksum VARCHAR(255),
          checksum_algorithm VARCHAR(50),
          file_encoding VARCHAR(50),
          mime_type VARCHAR(100),
          
          -- L∆∞u tr·ªØ k·ªπ thu·∫≠t
          primary_location VARCHAR(500),
          backup_locations TEXT[],
          storage_class VARCHAR(50),
          encryption_status BOOLEAN DEFAULT false,
          encryption_algorithm VARCHAR(100),
          
          -- B·∫£o qu·∫£n s·ªë
          preservation_level VARCHAR(50),
          migration_history TEXT[],
          integrity_checks JSONB,
          
          -- ============== SEARCH AND DISCOVERY ==============
          keywords TEXT[], -- Keywords for search
          categories TEXT[], -- Hierarchical categories
          tags TEXT[], -- User-defined tags
          search_terms_stemmed TEXT[],
          search_terms_synonyms TEXT[],
          search_terms_translations JSONB,
          
          -- ============== QUALITY AND ANALYTICS ==============
          -- Validation
          validation_date TIMESTAMP,
          validator VARCHAR(100),
          validation_status VARCHAR(50),
          validation_errors TEXT[],
          
          -- Usage statistics
          access_count INTEGER DEFAULT 0,
          download_count INTEGER DEFAULT 0,
          last_accessed TIMESTAMP,
          popular_sections TEXT[],
          
          -- Feedback
          average_rating DECIMAL(3,2),
          review_count INTEGER DEFAULT 0,
          comments JSONB,
          
          -- ============== RELATIONSHIPS ==============
          -- Hierarchical relationships
          parent_document_id UUID REFERENCES document_metadata(id),
          child_document_ids UUID[],
          sibling_document_ids UUID[],
          
          -- Associative relationships
          doc_references UUID[], -- Documents this document references (renamed from 'references')
          referenced_by UUID[], -- Documents that reference this document
          related_to UUID[], -- Related documents
          
          -- Temporal relationships
          supersedes UUID[], -- Documents this document supersedes
          superseded_by UUID REFERENCES document_metadata(id),
          based_on UUID[], -- Documents this is based on
          
          -- ============== METADATA MANAGEMENT ==============
          created_by VARCHAR(100),
          updated_by VARCHAR(100),
          metadata_version INTEGER DEFAULT 1,
          
          -- OCR specific fields
          ocr_confidence DECIMAL(5,2), -- OCR confidence score
          ocr_engine VARCHAR(50), -- OCR engine used
          ocr_date TIMESTAMP, -- When OCR was performed
          text_extraction_quality VARCHAR(20), -- excellent, good, fair, poor
          
          -- Full-text search
          document_text_tsv TSVECTOR, -- For PostgreSQL full-text search
          
          -- ============== Q&A AND SEMANTIC SEARCH ==============
          -- Document content for Q&A
          extracted_text TEXT, -- Full extracted text from OCR
          document_summary TEXT, -- Executive summary/abstract
          key_information JSONB, -- Structured key info (dates, amounts, parties, etc.)
          
          -- Semantic embeddings for vector search
          title_embedding VECTOR(1536), -- OpenAI embedding for title
          content_embedding VECTOR(1536), -- OpenAI embedding for content
          summary_embedding VECTOR(1536), -- OpenAI embedding for summary
          
          -- Question-Answer pairs
          predefined_qas JSONB, -- Pre-defined Q&A pairs
          
          -- Structured data extraction
          entities JSONB, -- Named entities (persons, organizations, locations, etc.)
          
          -- Key-value pairs for structured queries
          key_values JSONB, -- Structured key-value data
          
          -- Document sections for precise answers
          document_sections JSONB, -- Document structure with content
          
          -- FAQ and common questions
          common_questions JSONB, -- Frequently asked questions about this document
          question_patterns JSONB, -- Pattern matching for questions
          
          -- Contextual information
          document_context JSONB, -- Related context for better Q&A
          
          -- Multi-modal content
          images_metadata JSONB, -- Information about images, charts, tables
          tables_data JSONB, -- Extracted table data
          charts_data JSONB, -- Chart and graph data
          
          -- Language processing
          language_detected VARCHAR(10), -- Auto-detected language
          translation_available JSONB, -- Available translations
          sentiment_analysis JSONB, -- Document sentiment if applicable
          
          -- Custom fields for flexibility
          custom_metadata JSONB
      )
    `);
    console.log('‚úÖ ƒê√£ t·∫°o b·∫£ng document_metadata');
    
    // 5. T·∫°o c√°c indexes
    console.log('üìä ƒêang t·∫°o c√°c indexes...');
    
    // Companies indexes
    await client.query('CREATE INDEX idx_companies_code ON companies(company_code)');
    await client.query('CREATE INDEX idx_companies_name ON companies(company_name)');
    await client.query('CREATE INDEX idx_companies_parent ON companies(parent_company_id)');
    await client.query('CREATE INDEX idx_companies_status ON companies(status)');
    
    // Document metadata indexes
    await client.query('CREATE INDEX idx_doc_meta_identifier ON document_metadata(dc_identifier)');
    await client.query('CREATE INDEX idx_doc_meta_record_id ON document_metadata(record_identifier)');
    await client.query('CREATE INDEX idx_doc_meta_company ON document_metadata(company_id)');
    await client.query('CREATE INDEX idx_doc_meta_type ON document_metadata(dc_type)');
    await client.query('CREATE INDEX idx_doc_meta_status ON document_metadata(record_status)');
    await client.query('CREATE INDEX idx_doc_meta_state ON document_metadata(document_state)');
    await client.query('CREATE INDEX idx_doc_meta_created ON document_metadata(date_created)');
    await client.query('CREATE INDEX idx_doc_meta_effective ON document_metadata(date_effective)');
    await client.query('CREATE INDEX idx_doc_meta_expires ON document_metadata(date_expires)');
    await client.query('CREATE INDEX idx_doc_meta_security ON document_metadata(security_classification)');
    
    // GIN indexes for arrays and JSONB
    await client.query('CREATE INDEX idx_doc_meta_keywords ON document_metadata USING GIN(keywords)');
    await client.query('CREATE INDEX idx_doc_meta_tags ON document_metadata USING GIN(tags)');
    await client.query('CREATE INDEX idx_doc_meta_categories ON document_metadata USING GIN(categories)');
    await client.query('CREATE INDEX idx_doc_meta_custom ON document_metadata USING GIN(custom_metadata)');
    await client.query('CREATE INDEX idx_doc_meta_tsv ON document_metadata USING GIN(document_text_tsv)');
    
    // Indexes for Q&A and semantic search
    await client.query('CREATE INDEX idx_doc_meta_entities ON document_metadata USING GIN(entities)');
    await client.query('CREATE INDEX idx_doc_meta_key_values ON document_metadata USING GIN(key_values)');
    await client.query('CREATE INDEX idx_doc_meta_qas ON document_metadata USING GIN(predefined_qas)');
    await client.query('CREATE INDEX idx_doc_meta_sections ON document_metadata USING GIN(document_sections)');
    
    // Vector similarity search indexes (requires pgvector extension)
    try {
      await client.query('CREATE INDEX idx_doc_meta_title_embedding ON document_metadata USING ivfflat (title_embedding vector_cosine_ops)');
      await client.query('CREATE INDEX idx_doc_meta_content_embedding ON document_metadata USING ivfflat (content_embedding vector_cosine_ops)');
      await client.query('CREATE INDEX idx_doc_meta_summary_embedding ON document_metadata USING ivfflat (summary_embedding vector_cosine_ops)');
      console.log('‚úÖ ƒê√£ t·∫°o c√°c vector search indexes');
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o vector search indexes:', error.message);
      console.log('‚ö†Ô∏è Ti·∫øp t·ª•c qu√° tr√¨nh t·∫°o triggers...');
    }
    
    // 6. T·∫°o triggers
    console.log('üîÑ ƒêang t·∫°o triggers...');
    
    // Update modified timestamp for companies
    await client.query(`
      CREATE OR REPLACE FUNCTION update_modified_timestamp()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.updated_at = CURRENT_TIMESTAMP;
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `);
    
    await client.query(`
      CREATE TRIGGER companies_update_timestamp
          BEFORE UPDATE ON companies
          FOR EACH ROW
          EXECUTE FUNCTION update_modified_timestamp();
    `);
    
    // Update document modified timestamp
    await client.query(`
      CREATE OR REPLACE FUNCTION update_document_modified_timestamp()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.date_modified = CURRENT_TIMESTAMP;
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;
    `);
    
    await client.query(`
      CREATE TRIGGER document_metadata_update_timestamp
          BEFORE UPDATE ON document_metadata
          FOR EACH ROW
          EXECUTE FUNCTION update_document_modified_timestamp();
    `);
    
    // 7. Th√™m d·ªØ li·ªáu m·∫´u
    console.log('üìù ƒêang th√™m d·ªØ li·ªáu m·∫´u...');
    
    // Th√™m d·ªØ li·ªáu m·∫´u cho companies
    await client.query(`
      INSERT INTO companies (
          company_code, company_name, company_name_en, short_name,
          legal_form, tax_code, business_license,
          headquarters_address, city, province,
          phone, email, website,
          industry, business_type,
          registered_capital, charter_capital, currency_code,
          legal_representative, ceo, chairman,
          status, established_date,
          created_by, description,
          document_naming_convention, default_retention_policy,
          document_approval_workflow, security_policies,
          compliance_requirements, departments, business_functions,
          document_categories, workflow_templates,
          supported_languages, company_branding
      ) VALUES 
      (
          'PDH', 'C√¥ng ty C·ªï ph·∫ßn Ph√°t ƒê·∫°t', 'Phat Dat Corporation', 'Ph√°t ƒê·∫°t',
          'C√¥ng ty C·ªï ph·∫ßn', '0123456789', 'ƒêKKD001',
          '123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM', 'H·ªì Ch√≠ Minh', 'H·ªì Ch√≠ Minh',
          '028-12345678', 'info@phatdat.com', 'https://phatdat.com',
          'B·∫•t ƒë·ªông s·∫£n', 'Parent',
          500000000000, 500000000000, 'VND',
          'Nguy·ªÖn VƒÉn A', 'Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Th·ªã B',
          'active', '2010-01-15',
          'system', 'C√¥ng ty m·∫π trong h·ªá th·ªëng Ph√°t ƒê·∫°t Holdings',
          
          'PDH-{TYPE}-{YEAR}-{SEQUENCE}',
          
          '{"contracts": {"period": 7, "trigger": "expiry", "action": "review"}, "policies": {"period": 5, "trigger": "update", "action": "review"}}',
          
          '{"draft": {"next": "review", "approvers": ["creator", "supervisor"]}, "review": {"next": "approved", "approvers": ["department_head", "legal"]}}',
          
          '{"classification_levels": ["public", "internal", "confidential", "secret"], "default_classification": "internal"}',
          
          ARRAY['Lu·∫≠t Doanh nghi·ªáp', 'Lu·∫≠t Ch·ª©ng kho√°n', 'Th√¥ng t∆∞ 155/2015/TT-BTC'],
          
          '{"BTC": {"name": "Ban T·ªïng Gi√°m ƒë·ªëc", "code": "BTC", "head": "T·ªïng Gi√°m ƒë·ªëc"}}',
          
          '{"governance": {"name": "Qu·∫£n tr·ªã doanh nghi·ªáp", "departments": ["BTC", "BPC"]}}',
          
          '{"legal": {"name": "Ph√°p l√Ω", "subcategories": ["contracts", "agreements", "licenses"]}}',
          
          '{"contract_approval": {"name": "Ph√™ duy·ªát h·ª£p ƒë·ªìng", "steps": [{"step": "draft", "approver": "legal_officer", "duration": 2}]}}',
          
          ARRAY['vi', 'en'],
          
          '{"logo": "/assets/logos/pdh-logo.png", "colors": {"primary": "#1E40AF"}}'
      )
    `);
    console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u cho companies');
    
    // Th√™m d·ªØ li·ªáu m·∫´u cho document_metadata
    try {
      await client.query(`
        INSERT INTO document_metadata (
            dc_identifier, dc_title, dc_description, dc_type, dc_format, dc_language,
            dc_creator, dc_subject, dc_publisher, dc_date, dc_rights,
            record_identifier, record_class, record_status,
            retention_period, retention_trigger, disposal_action,
            security_classification, authorized_users,
            company_id, organization_name, department, business_function,
            workflow_process_name, workflow_process_owner, workflow_approval_required,
            version_major, version_minor, version_patch,
            date_effective, date_expires, date_review,
            document_state,
            keywords, categories, tags,
            created_by, updated_by,
            ocr_confidence, ocr_engine, text_extraction_quality,
            extracted_text, document_summary, key_information,
            entities, key_values, document_sections, common_questions,
            document_context, custom_metadata
        ) VALUES (
            'PDH-CONTRACT-2025-001',
            'H·ª£p ƒë·ªìng cung c·∫•p d·ªãch v·ª• h·∫° t·∫ßng CNTT 2025',
            'H·ª£p ƒë·ªìng k√Ω k·∫øt gi·ªØa Ph√°t ƒê·∫°t Holdings v√† ƒë·ªëi t√°c XYZ',
            'Contract', 'application/pdf', 'vi',
            ARRAY['Ban Ph√°p ch·∫ø PDH', 'Ph√≤ng CNTT'],
            ARRAY['H·ª£p ƒë·ªìng d·ªãch v·ª•', 'CNTT', 'H·∫° t·∫ßng'],
            'Ph√°t ƒê·∫°t Holdings',
            '2025-01-20T10:00:00Z',
            'N·ªôi b·ªô c√¥ng ty',
            
            'REC-2025-001', 'Contract', 'active',
            7, 'contract_expiry', 'review',
            'internal', ARRAY['Ban Ph√°p ch·∫ø', 'Ban T·ªïng Gi√°m ƒë·ªëc'],
            
            (SELECT id FROM companies WHERE company_code = 'PDH'),
            'Ph√°t ƒê·∫°t Holdings', 'Ban Ph√°p ch·∫ø', 'Qu·∫£n l√Ω h·ª£p ƒë·ªìng',
            'Quy tr√¨nh k√Ω k·∫øt h·ª£p ƒë·ªìng', 'Tr∆∞·ªüng ph√≤ng Ph√°p ch·∫ø', true,
            
            1, 0, 0,
            '2025-01-20T00:00:00Z', '2025-12-31T23:59:59Z', '2025-06-30T00:00:00Z',
            'published',
            
            ARRAY['h·ª£p ƒë·ªìng', 'CNTT', 'd·ªãch v·ª•'],
            ARRAY['H·ª£p ƒë·ªìng', 'D·ªãch v·ª•', 'CNTT'],
            ARRAY['urgent', 'annual-contract'],
            
            'system', 'admin',
            95.5, 'Tesseract 5.0', 'excellent',
            
            'C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM... H·ª¢P ƒê·ªíNG CUNG C·∫§P D·ªäCH V·ª§...',
            'H·ª£p ƒë·ªìng cung c·∫•p d·ªãch v·ª• h·∫° t·∫ßng CNTT gi·ªØa Ph√°t ƒê·∫°t Holdings v√† C√¥ng ty XYZ',
            
            '{"contract_number": "PDH-CONTRACT-2025-001", "contract_value": 500000000, "currency": "VND"}',
            
            '{"persons": ["Nguy·ªÖn VƒÉn A", "Tr·∫ßn Th·ªã B"], "organizations": ["Ph√°t ƒê·∫°t Holdings", "C√¥ng ty XYZ"]}',
            
            '{"contract_value": 500000000, "contract_currency": "VND", "effective_date": "2025-01-20"}',
            
            '[{"section_id": "1", "title": "Th√¥ng tin c√°c b√™n", "content": "B√™n A: Ph√°t ƒê·∫°t Holdings..."}]',
            
            '[{"question": "H·ª£p ƒë·ªìng n√†y c√≥ gi√° tr·ªã bao nhi√™u?", "answer": "500,000,000 VND", "confidence": 0.95}]',
            
            '{"background": "H·ª£p ƒë·ªìng n√†y l√† ph·∫ßn c·ªßa d·ª± √°n n√¢ng c·∫•p h·ªá th·ªëng CNTT"}',
            
            '{"priority": "high", "cost_center": "IT-001"}'
        )
      `);
      console.log('‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u cho document_metadata');
    } catch (error) {
      console.error('‚ùå L·ªói khi th√™m d·ªØ li·ªáu m·∫´u cho document_metadata:', error.message);
      console.log('‚ö†Ô∏è Ti·∫øp t·ª•c qu√° tr√¨nh migration...');
    }
    
    // Commit transaction
    await client.query('COMMIT');
    
    console.log('‚úÖ ƒê√£ ho√†n th√†nh vi·ªác x√≥a v√† t·∫°o l·∫°i c√°c b·∫£ng t√†i li·ªáu v√† c√¥ng ty');
    
  } catch (error) {
    // Rollback transaction n·∫øu c√≥ l·ªói
    await client.query('ROLLBACK');
    console.error('‚ùå L·ªói khi x√≥a v√† t·∫°o l·∫°i c√°c b·∫£ng:', error);
    throw error;
  } finally {
    client.release();
  }
}

// Th·ª±c thi h√†m
recreateDocumentTables()
  .then(() => {
    console.log('üéâ Qu√° tr√¨nh x√≥a v√† t·∫°o l·∫°i c√°c b·∫£ng ho√†n t·∫•t th√†nh c√¥ng');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• Qu√° tr√¨nh x√≥a v√† t·∫°o l·∫°i c√°c b·∫£ng th·∫•t b·∫°i:', error);
    process.exit(1);
  }); 